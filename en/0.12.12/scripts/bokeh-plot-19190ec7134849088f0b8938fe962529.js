(function() {
  var fn = function() {
    
    (function(root) {
      function now() {
        return new Date();
      }
    
      var force = false;
    
      if (typeof (root._bokeh_onload_callbacks) === "undefined" || force === true) {
        root._bokeh_onload_callbacks = [];
        root._bokeh_is_loading = undefined;
      }
    
      
      
    
      
      
    
      function run_callbacks() {
        try {
          root._bokeh_onload_callbacks.forEach(function(callback) { callback() });
        }
        finally {
          delete root._bokeh_onload_callbacks
        }
        console.info("Bokeh: all callbacks have finished");
      }
    
      function load_libs(js_urls, callback) {
        root._bokeh_onload_callbacks.push(callback);
        if (root._bokeh_is_loading > 0) {
          console.log("Bokeh: BokehJS is being loaded, scheduling callback at", now());
          return null;
        }
        if (js_urls == null || js_urls.length === 0) {
          run_callbacks();
          return null;
        }
        console.log("Bokeh: BokehJS not loaded, scheduling load and callback at", now());
        root._bokeh_is_loading = js_urls.length;
        for (var i = 0; i < js_urls.length; i++) {
          var url = js_urls[i];
          var s = document.createElement('script');
          s.src = url;
          s.async = false;
          s.onreadystatechange = s.onload = function() {
            root._bokeh_is_loading--;
            if (root._bokeh_is_loading === 0) {
              console.log("Bokeh: all BokehJS libraries loaded");
              run_callbacks()
            }
          };
          s.onerror = function() {
            console.warn("failed to load library " + url);
          };
          console.log("Bokeh: injecting script tag for BokehJS library: ", url);
          document.getElementsByTagName("head")[0].appendChild(s);
        }
      };var element = document.getElementById("1fe2b172-06ae-46b1-a842-42f9090d62c1");
      if (element == null) {
        console.log("Bokeh: ERROR: autoload.js configured with elementid '1fe2b172-06ae-46b1-a842-42f9090d62c1' but no matching script tag was found. ")
        return false;
      }
    
      var js_urls = ["https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js", "https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/js/ion.rangeSlider.js", "https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-0.12.12.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.12.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-0.12.12.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-gl-0.12.12.min.js"];
    
      var inline_js = [
        function(Bokeh) {
          Bokeh.set_log_level("info");
        },
        
        function(Bokeh) {
          (function(root, factory) {
          //  if(typeof exports === 'object' && typeof module === 'object')
          //    factory(require("Bokeh"));
          //  else if(typeof define === 'function' && define.amd)
          //    define(["Bokeh"], factory);
          //  else if(typeof exports === 'object')
          //    factory(require("Bokeh"));
          //  else
              factory(root["Bokeh"]);
          })(this, function(Bokeh) {
            var define;
            return (function outer(modules, entry) {
            if (Bokeh != null) {
              return Bokeh.register_plugin(modules, {}, entry);
            } else {
              throw new Error("Cannot find Bokeh. You have to load it prior to loading plugins.");
            }
          })
          ({
            "custom/main": function(require, module, exports) {
              var models = {
                "LatexLabel": require("custom/bk_script_1d29982a64c2449197edd0c310ea1f8f.latex_label").LatexLabel,
          "IonRangeSlider": require("custom/bk_script_366ddc1f18614c4cb4800343ca94a483.ion_range_slider").IonRangeSlider,
          "Surface3d": require("custom/bk_script_727d6e5c55ab42138c0ae3c822d6ef13.surface3d").Surface3d,
          "Custom": require("custom/bk_script_b9b373abe18c43ea907e9a740dc99a95.custom").Custom,
          "MyFormatter": require("custom/bk_script_cf3005b13ac34287ae4cb92e0b65d530.my_formatter").MyFormatter,
          "DrawTool": require("custom/bk_script_dd4c377015034ab187503a36d9264b7f.draw_tool").DrawTool
              };
              require("base").register_models(models);
              module.exports = models;
            },
            "custom/bk_script_1d29982a64c2449197edd0c310ea1f8f.latex_label": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var label_1 = require("models/annotations/label");
          exports.LatexLabelView = /** @class */ (function (_super) {
              __extends(LatexLabelView, _super);
              function LatexLabelView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              LatexLabelView.prototype.render = function () {
                  var angle, panel, ref, sx, sy, xscale, yscale;
                  //--- Start of copied section from ``Label.render`` implementation
                  // Here because AngleSpec does units tranform and label doesn't support specs
                  switch (this.model.angle_units) {
                      case "rad":
                          angle = -1 * this.model.angle;
                          break;
                      case "deg":
                          angle = -1 * this.model.angle * Math.PI / 180.0;
                  }
                  panel = (ref = this.model.panel) != null ? ref : this.plot_view.frame;
                  xscale = this.plot_view.frame.xscales[this.model.x_range_name];
                  yscale = this.plot_view.frame.yscales[this.model.y_range_name];
                  sx = this.model.x_units === "data" ? xscale.compute(this.model.x) : panel.xview.compute(this.model.x);
                  sy = this.model.y_units === "data" ? yscale.compute(this.model.y) : panel.yview.compute(this.model.y);
                  sx += this.model.x_offset;
                  sy -= this.model.y_offset;
                  //--- End of copied section from ``Label.render`` implementation
                  // Must render as superpositioned div (not on canvas) so that KaTex
                  // css can properly style the text
                  this._css_text(this.plot_view.canvas_view.ctx, "", sx, sy, angle);
                  // ``katex`` is loaded into the global window at runtime
                  // katex.renderToString returns a html ``span`` element
                  return katex.render(this.model.text, this.el, {
                      displayMode: true
                  });
              };
              return LatexLabelView;
          }(label_1.LabelView));
          exports.LatexLabel = (function () {
              var LatexLabel = /** @class */ (function (_super) {
                  __extends(LatexLabel, _super);
                  function LatexLabel() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  return LatexLabel;
              }(label_1.Label));
              ;
              LatexLabel.prototype.type = 'LatexLabel';
              LatexLabel.prototype.default_view = exports.LatexLabelView;
              return LatexLabel;
          })();
          
          },
          "custom/bk_script_366ddc1f18614c4cb4800343ca94a483.ion_range_slider": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var callback_1 = require("core/util/callback");
          var p = require("core/properties");
          var dom_1 = require("core/dom");
          var input_widget_1 = require("models/widgets/input_widget");
          // This model will actually need to render things, so we must provide
          // view. The LayoutDOM model has a view already, so we will start with that
          exports.IonRangeSliderView = /** @class */ (function (_super) {
              __extends(IonRangeSliderView, _super);
              function IonRangeSliderView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              IonRangeSliderView.prototype._createElement = function () {
                  var el;
                  el = _super.prototype._createElement.call(this);
                  this.$el = $(el);
                  return el;
              };
              IonRangeSliderView.prototype.template = function () {
                  var title, value;
                  if (this.model.title != null) {
                      if (this.model.title.length !== 0) {
                          title = dom_1.label({
                              for: this.model.id
                          }, " " + this.model.title + ": ");
                      }
                      value = dom_1.input({
                          type: "text",
                          id: this.model.id,
                          readonly: true
                      });
                  }
                  return dom_1.div({
                      class: "bk-slider-parent"
                  }, title, value, dom_1.div({
                      class: "bk-slider-horizontal"
                  }, dom_1.input({
                      type: "text",
                      class: "slider",
                      id: this.model.id
                  })));
              };
              IonRangeSliderView.prototype.initialize = function (options) {
                  _super.prototype.initialize.call(this, options);
                  this.connect(this.model.change, this.render);
                  dom_1.empty(this.el);
                  this.el.appendChild(this.template());
                  this.callbackWrapper = null;
                  if (this.model.callback_policy === 'continuous') {
                      this.callbackWrapper = function () {
                          var ref;
                          return (ref = this.model.callback) != null ? ref.execute(this.model) : void 0;
                      };
                  }
                  if (this.model.callback_policy === 'throttle' && this.model.callback) {
                      this.callbackWrapper = callback_1.throttle(function () {
                          var ref;
                          return (ref = this.model.callback) != null ? ref.execute(this.model) : void 0;
                      }, this.model.callback_throttle);
                  }
                  return this.render();
              };
              IonRangeSliderView.prototype.render = function () {
                  var _this = this;
                  var disable, from, grid, max, min, opts, range, slider, step, to;
                  // Backbone Views create <div> elements by default, accessible as @$el.
                  // Many Bokeh views ignore this default <div>, and instead do things
                  // like draw to the HTML canvas. In this case though, we change the
                  // contents of the <div>, based on the current slider value.
                  _super.prototype.render.call(this);
                  // Set up parameters
                  max = this.model.end;
                  min = this.model.start;
                  grid = this.model.grid;
                  disable = this.model.disabled;
                  range = this.model.range || [max, min];
                  from = range[0], to = range[1];
                  step = this.model.step || ((max - min) / 50);
                  opts = {
                      type: "double",
                      grid: grid,
                      min: min,
                      max: max,
                      from: from,
                      to: to,
                      step: step,
                      disable: disable,
                      onChange: function (data) {
                          return _this.slide(data);
                      },
                      onFinish: function (data) {
                          return _this.slidestop(data);
                      }
                  };
                  dom_1.input = this.$el.find('.slider')[0];
                  slider = jQuery(dom_1.input).ionRangeSlider(opts);
                  range = [from, to];
                  this.$el.find("#" + this.model.id).val(range.join(' - '));
                  this.$el.find('.bk-slider-parent').height(this.model.height);
                  return this;
              };
              IonRangeSliderView.prototype.slidestop = function (data) {
                  var ref;
                  if (this.model.callback_policy === 'mouseup' || this.model.callback_policy === 'throttle') {
                      return (ref = this.model.callback) != null ? ref.execute(this.model) : void 0;
                  }
              };
              IonRangeSliderView.prototype.slide = function (data) {
                  var range, value;
                  range = [data.from, data.to];
                  value = range.join(' - ');
                  this.$el.find("#" + this.model.id).val(value);
                  this.model.range = range;
                  if (this.callbackWrapper) {
                      return this.callbackWrapper();
                  }
              };
              return IonRangeSliderView;
          }(input_widget_1.InputWidgetView));
          exports.IonRangeSlider = (function () {
              var IonRangeSlider = /** @class */ (function (_super) {
                  __extends(IonRangeSlider, _super);
                  function IonRangeSlider() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  return IonRangeSlider;
              }(input_widget_1.InputWidget));
              ;
              // If there is an associated view, this is boilerplate.
              IonRangeSlider.prototype.default_view = exports.IonRangeSliderView;
              // The ``type`` class attribute should generally match exactly the name
              // of the corresponding Python class.
              IonRangeSlider.prototype.type = "IonRangeSlider";
              // The @define block adds corresponding "properties" to the JS model. These
              // should basically line up 1-1 with the Python model class. Most property
              // types have counterparts, e.g. bokeh.core.properties.String will be
              // p.String in the JS implementation. Where the JS type system is not yet
              // as rich, you can use p.Any as a "wildcard" property type.
              IonRangeSlider.define({
                  range: [p.Any],
                  start: [p.Number, 0],
                  end: [p.Number, 1],
                  step: [p.Number, 0.1],
                  grid: [p.Bool, true],
                  callback_throttle: [p.Number, 200],
                  callback_policy: [p.String, "throttle"]
              });
              return IonRangeSlider;
          })();
          
          },
          "custom/bk_script_727d6e5c55ab42138c0ae3c822d6ef13.surface3d": function(require, module, exports) {
          "use strict";
          // This file contains the JavaScript (CoffeeScript) implementation
          // for a Bokeh custom extension. The "surface3d.py" contains the
          // python counterpart.
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          // This custom model wraps one part of the third-party vis.js library:
          //     http://visjs.org/index.html
          // Making it easy to hook up python data analytics tools (NumPy, SciPy,
          // Pandas, etc.) to web presentations using the Bokeh server.
          // These "require" lines are similar to python "import" statements
          var OPTIONS;
          var p = require("core/properties");
          var layout_dom_1 = require("models/layouts/layout_dom");
          // This defines some default options for the Graph3d feature of vis.js
          // See: http://visjs.org/graph3d_examples.html for more details.
          OPTIONS = {
              width: '600px',
              height: '600px',
              style: 'surface',
              showPerspective: true,
              showGrid: true,
              keepAspectRatio: true,
              verticalRatio: 1.0,
              legendLabel: 'stuff',
              cameraPosition: {
                  horizontal: -0.35,
                  vertical: 0.22,
                  distance: 1.8
              }
          };
          // To create custom model extensions that will render on to the HTML canvas
          // or into the DOM, we must create a View subclass for the model. Currently
          // Bokeh models and views are based on BackBone. More information about
          // using Backbone can be found here:
          //     http://backbonejs.org/
          // In this case we will subclass from the existing BokehJS ``LayoutDOMView``,
          // corresponding to our
          exports.Surface3dView = /** @class */ (function (_super) {
              __extends(Surface3dView, _super);
              function Surface3dView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              Surface3dView.prototype.initialize = function (options) {
                  var _this = this;
                  var script, url;
                  _super.prototype.initialize.call(this, options);
                  url = "https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.min.js";
                  script = document.createElement('script');
                  script.src = url;
                  script.async = false;
                  script.onreadystatechange = script.onload = function () {
                      return _this._init();
                  };
                  return document.querySelector("head").appendChild(script);
              };
              Surface3dView.prototype._init = function () {
                  // Create a new Graph3s using the vis.js API. This assumes the vis.js has
                  // already been loaded (e.g. in a custom app template). In the future Bokeh
                  // models will be able to specify and load external scripts automatically.
                  var _this = this;
                  // Backbone Views create <div> elements by default, accessible as @el. Many
                  // Bokeh views ignore this default <div>, and instead do things like draw
                  // to the HTML canvas. In this case though, we use the <div> to attach a
                  // Graph3d to the DOM.
                  this._graph = new vis.Graph3d(this.el, this.get_data(), OPTIONS);
                  // Set Backbone listener so that when the Bokeh data source has a change
                  // event, we can process the new data
                  return this.connect(this.model.data_source.change, function () {
                      return _this._graph.setData(_this.get_data());
                  });
              };
              // This is the callback executed when the Bokeh data has an change. Its basic
              // function is to adapt the Bokeh data source to the vis.js DataSet format.
              Surface3dView.prototype.get_data = function () {
                  var data, i, j, ref, source;
                  data = new vis.DataSet();
                  source = this.model.data_source;
                  for (i = j = 0, ref = source.get_length(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                      data.add({
                          x: source.get_column(this.model.x)[i],
                          y: source.get_column(this.model.y)[i],
                          z: source.get_column(this.model.z)[i],
                          style: source.get_column(this.model.color)[i]
                      });
                  }
                  return data;
              };
              return Surface3dView;
          }(layout_dom_1.LayoutDOMView));
          exports.Surface3d = (function () {
              // We must also create a corresponding JavaScript Backbone model sublcass to
              // correspond to the python Bokeh model subclass. In this case, since we want
              // an element that can position itself in the DOM according to a Bokeh layout,
              // we subclass from ``LayoutDOM``
              var Surface3d = /** @class */ (function (_super) {
                  __extends(Surface3d, _super);
                  function Surface3d() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  return Surface3d;
              }(layout_dom_1.LayoutDOM));
              ;
              // This is usually boilerplate. In some cases there may not be a view.
              Surface3d.prototype.default_view = exports.Surface3dView;
              // The ``type`` class attribute should generally match exactly the name
              // of the corresponding Python class.
              Surface3d.prototype.type = "Surface3d";
              // The @define block adds corresponding "properties" to the JS model. These
              // should basically line up 1-1 with the Python model class. Most property
              // types have counterparts, e.g. ``bokeh.core.properties.String`` will be
              // ``p.String`` in the JS implementatin. Where the JS type system is not yet
              // as rich, you can use ``p.Any`` as a "wildcard" property type.
              Surface3d.define({
                  x: [p.String],
                  y: [p.String],
                  z: [p.String],
                  color: [p.String],
                  data_source: [p.Instance]
              });
              return Surface3d;
          })();
          
          },
          "custom/bk_script_b9b373abe18c43ea907e9a740dc99a95.custom": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var dom_1 = require("core/dom");
          var p = require("core/properties");
          var layout_dom_1 = require("models/layouts/layout_dom");
          var CustomView = /** @class */ (function (_super) {
              __extends(CustomView, _super);
              function CustomView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              CustomView.prototype.initialize = function (options) {
                  var _this = this;
                  _super.prototype.initialize.call(this, options);
                  this.render();
                  // Set BokehJS listener so that when the Bokeh slider has a change
                  // event, we can process the new data
                  this.connect(this.model.slider.change, function () { return _this.render(); });
              };
              CustomView.prototype.render = function () {
                  // BokehjS Views create <div> elements by default, accessible as
                  // ``this.el``. Many Bokeh views ignore this default <div>, and instead
                  // do things like draw to the HTML canvas. In this case though, we change
                  // the contents of the <div>, based on the current slider value.
                  dom_1.empty(this.el);
                  this.el.appendChild(dom_1.div({
                      style: {
                          'padding': '2px',
                          'color': '#b88d8e',
                          'background-color': '#2a3153',
                      },
                  }, this.model.text + ": " + this.model.slider.value));
              };
              return CustomView;
          }(layout_dom_1.LayoutDOMView));
          exports.CustomView = CustomView;
          var Custom = /** @class */ (function (_super) {
              __extends(Custom, _super);
              function Custom() {
                  var _this = _super !== null && _super.apply(this, arguments) || this;
                  // If there is an associated view, this is typically boilerplate.
                  _this.default_view = CustomView;
                  // The ``type`` class attribute should generally match exactly the name
                  // of the corresponding Python class.
                  _this.type = "Custom";
                  return _this;
              }
              return Custom;
          }(layout_dom_1.LayoutDOM));
          exports.Custom = Custom;
          // The @define block adds corresponding "properties" to the JS model. These
          // should normally line up 1-1 with the Python model class. Most property
          // types have counterparts, e.g. bokeh.core.properties.String will be
          // ``p.String`` in the JS implementation. Any time the JS type system is not
          // yet as complete, you can use ``p.Any`` as a "wildcard" property type.
          Custom.define({
              text: [p.String],
              slider: [p.Any],
          });
          
          },
          "custom/bk_script_cf3005b13ac34287ae4cb92e0b65d530.my_formatter": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var tick_formatter_1 = require("models/formatters/tick_formatter");
          exports.MyFormatter = (function () {
              var MyFormatter = /** @class */ (function (_super) {
                  __extends(MyFormatter, _super);
                  function MyFormatter() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  // TickFormatters should implement this method, which accepts a lisst
                  // of numbers (ticks) and returns a list of strings
                  MyFormatter.prototype.doFormat = function (ticks) {
                      var formatted, i, j, ref;
                      // format the first tick as-is
                      formatted = ["" + ticks[0]];
                      // format the remaining ticks as a difference from the first
                      for (i = j = 1, ref = ticks.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
                          formatted.push("+" + (ticks[i] - ticks[0]).toPrecision(2));
                      }
                      return formatted;
                  };
                  return MyFormatter;
              }(tick_formatter_1.TickFormatter));
              ;
              MyFormatter.prototype.type = "MyFormatter";
              return MyFormatter;
          })();
          
          },
          "custom/bk_script_dd4c377015034ab187503a36d9264b7f.draw_tool": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var p = require("core/properties");
          var gesture_tool_1 = require("models/tools/gestures/gesture_tool");
          exports.DrawToolView = /** @class */ (function (_super) {
              __extends(DrawToolView, _super);
              function DrawToolView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              // this is executed when the pan/drag event starts
              DrawToolView.prototype._pan_start = function (e) {
                  return this.model.source.data = {
                      x: [],
                      y: []
                  };
              };
              // this is executed on subsequent mouse/touch moves
              DrawToolView.prototype._pan = function (e) {
                  var frame, sx, sy, x, y;
                  frame = this.plot_model.frame;
                  (_a = e.bokeh, sx = _a.sx, sy = _a.sy);
                  if (!frame.bbox.contains(sx, sy)) {
                      return null;
                  }
                  x = frame.xscales['default'].invert(sx);
                  y = frame.yscales['default'].invert(sy);
                  this.model.source.data.x.push(x);
                  this.model.source.data.y.push(y);
                  return this.model.source.change.emit();
                  var _a;
              };
              // this is executed then the pan/drag ends
              DrawToolView.prototype._pan_end = function (e) {
                  return null;
              };
              return DrawToolView;
          }(gesture_tool_1.GestureToolView));
          exports.DrawTool = (function () {
              var DrawTool = /** @class */ (function (_super) {
                  __extends(DrawTool, _super);
                  function DrawTool() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  return DrawTool;
              }(gesture_tool_1.GestureTool));
              ;
              DrawTool.prototype.default_view = exports.DrawToolView;
              DrawTool.prototype.type = "DrawTool";
              DrawTool.prototype.tool_name = "Drag Span";
              DrawTool.prototype.icon = "bk-tool-icon-lasso-select";
              DrawTool.prototype.event_type = "pan";
              DrawTool.prototype.default_order = 12;
              DrawTool.define({
                  source: [p.Instance]
              });
              return DrawTool;
          })();
          
          }
          }, "custom/main");
          ;
          });
        },
        
        function(Bokeh) {
          (function() {
            var fn = function() {
              Bokeh.safely(function() {
                (function(root) {
                  function embed_document(root) {
                    
                  var docs_json = '{"e206556d-0dc1-4228-81b9-d850fc212c3f":{"roots":{"references":[{"attributes":{"overlay":{"id":"62cf9464-4632-4ac6-b07e-a918308f52c7","type":"BoxAnnotation"}},"id":"6126dae1-1a68-4f2c-9a58-68fbba03c27e","type":"BoxZoomTool"},{"attributes":{},"id":"42cb434f-04a7-4fdf-810a-4a8802d78d72","type":"LinearScale"},{"attributes":{},"id":"f53cb6e3-c2a0-460d-8184-efe16e082126","type":"BasicTicker"},{"attributes":{"axis_label":"Y","formatter":{"id":"6af6a15d-4b0c-4ab0-880c-6d0ac3b3f62c","type":"BasicTickFormatter"},"plot":{"id":"c832eee8-e57e-4bb6-9b7d-865f588ba44a","subtype":"Figure","type":"Plot"},"ticker":{"id":"f935d92b-0829-406e-b293-d2ed641463b0","type":"BasicTicker"}},"id":"63d9f5a8-1b47-4ef1-a680-db2b230228af","type":"LinearAxis"},{"attributes":{"below":[{"id":"59115305-d4d4-4bfe-8753-ac3ea0bf7913","type":"LinearAxis"}],"left":[{"id":"63d9f5a8-1b47-4ef1-a680-db2b230228af","type":"LinearAxis"}],"renderers":[{"id":"59115305-d4d4-4bfe-8753-ac3ea0bf7913","type":"LinearAxis"},{"id":"ec5b19de-8bc7-4734-ac9b-057af384b583","type":"Grid"},{"id":"63d9f5a8-1b47-4ef1-a680-db2b230228af","type":"LinearAxis"},{"id":"25ee00e2-f895-440b-83de-7c08475b396a","type":"Grid"},{"id":"62cf9464-4632-4ac6-b07e-a918308f52c7","type":"BoxAnnotation"},{"id":"b9cbd54f-af2b-49e8-bbde-52c10b27649e","type":"GlyphRenderer"},{"id":"2f7823ec-460b-4a34-88c3-02393eccb124","type":"Band"}],"title":{"id":"90059b7e-b4f2-45dc-b689-a9bce42ae920","type":"Title"},"toolbar":{"id":"f7915bb3-86f0-4fc8-bfa1-98c1c56c8fce","type":"Toolbar"},"x_range":{"id":"cbcf74aa-e0c3-424b-a8fb-97d648b6e72a","type":"DataRange1d"},"x_scale":{"id":"4b100c7a-b7be-4a36-8b7b-c2cdbf72b0ba","type":"LinearScale"},"y_range":{"id":"3f6ffa54-0fc7-4f05-969c-c66e59c65f76","type":"DataRange1d"},"y_scale":{"id":"42cb434f-04a7-4fdf-810a-4a8802d78d72","type":"LinearScale"}},"id":"c832eee8-e57e-4bb6-9b7d-865f588ba44a","subtype":"Figure","type":"Plot"},{"attributes":{},"id":"b56a1674-0e48-443e-9b49-43b410ae1e10","type":"PanTool"},{"attributes":{"base":{"field":"x","units":"data"},"fill_alpha":{"value":1.0},"level":"underlay","line_color":{"value":"black"},"lower":{"field":"lower","units":"data"},"plot":{"id":"c832eee8-e57e-4bb6-9b7d-865f588ba44a","subtype":"Figure","type":"Plot"},"source":{"id":"01ebb83f-af8f-4cf7-913c-c9b469764cdc","type":"ColumnDataSource"},"upper":{"field":"upper","units":"data"}},"id":"2f7823ec-460b-4a34-88c3-02393eccb124","type":"Band"},{"attributes":{"plot":null,"text":"Rolling Standard Deviation"},"id":"90059b7e-b4f2-45dc-b689-a9bce42ae920","type":"Title"},{"attributes":{},"id":"791a53e1-57a7-46a3-b399-7d8160ec10e0","type":"ResetTool"},{"attributes":{},"id":"90ddc16f-14a8-4fda-80f3-5345ce5064b9","type":"SaveTool"},{"attributes":{"callback":null},"id":"cbcf74aa-e0c3-424b-a8fb-97d648b6e72a","type":"DataRange1d"},{"attributes":{"dimension":1,"grid_line_alpha":{"value":0.5},"plot":{"id":"c832eee8-e57e-4bb6-9b7d-865f588ba44a","subtype":"Figure","type":"Plot"},"ticker":{"id":"f935d92b-0829-406e-b293-d2ed641463b0","type":"BasicTicker"}},"id":"25ee00e2-f895-440b-83de-7c08475b396a","type":"Grid"},{"attributes":{"data_source":{"id":"01ebb83f-af8f-4cf7-913c-c9b469764cdc","type":"ColumnDataSource"},"glyph":{"id":"d18009ad-820c-4f43-8e55-44cb1c6da223","type":"Circle"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"95ae037a-9b81-4e42-9e3f-d784379c79f3","type":"Circle"},"selection_glyph":null,"view":{"id":"a052afd4-1dc7-4771-a44c-866ca671df0c","type":"CDSView"}},"id":"b9cbd54f-af2b-49e8-bbde-52c10b27649e","type":"GlyphRenderer"},{"attributes":{"bottom_units":"screen","fill_alpha":{"value":0.5},"fill_color":{"value":"lightgrey"},"left_units":"screen","level":"overlay","line_alpha":{"value":1.0},"line_color":{"value":"black"},"line_dash":[4,4],"line_width":{"value":2},"plot":null,"render_mode":"css","right_units":"screen","top_units":"screen"},"id":"62cf9464-4632-4ac6-b07e-a918308f52c7","type":"BoxAnnotation"},{"attributes":{},"id":"4b100c7a-b7be-4a36-8b7b-c2cdbf72b0ba","type":"LinearScale"},{"attributes":{"source":{"id":"01ebb83f-af8f-4cf7-913c-c9b469764cdc","type":"ColumnDataSource"}},"id":"a052afd4-1dc7-4771-a44c-866ca671df0c","type":"CDSView"},{"attributes":{},"id":"f935d92b-0829-406e-b293-d2ed641463b0","type":"BasicTicker"},{"attributes":{"active_drag":"auto","active_inspect":"auto","active_scroll":"auto","active_tap":"auto","tools":[{"id":"b56a1674-0e48-443e-9b49-43b410ae1e10","type":"PanTool"},{"id":"2910b770-613c-425c-a7e6-124914c4d4cd","type":"WheelZoomTool"},{"id":"6126dae1-1a68-4f2c-9a58-68fbba03c27e","type":"BoxZoomTool"},{"id":"791a53e1-57a7-46a3-b399-7d8160ec10e0","type":"ResetTool"},{"id":"90ddc16f-14a8-4fda-80f3-5345ce5064b9","type":"SaveTool"}]},"id":"f7915bb3-86f0-4fc8-bfa1-98c1c56c8fce","type":"Toolbar"},{"attributes":{},"id":"0db5510a-f0bf-4962-95bd-7434f04168b7","type":"BasicTickFormatter"},{"attributes":{"axis_label":"X","formatter":{"id":"0db5510a-f0bf-4962-95bd-7434f04168b7","type":"BasicTickFormatter"},"plot":{"id":"c832eee8-e57e-4bb6-9b7d-865f588ba44a","subtype":"Figure","type":"Plot"},"ticker":{"id":"f53cb6e3-c2a0-460d-8184-efe16e082126","type":"BasicTicker"}},"id":"59115305-d4d4-4bfe-8753-ac3ea0bf7913","type":"LinearAxis"},{"attributes":{"callback":null},"id":"3f6ffa54-0fc7-4f05-969c-c66e59c65f76","type":"DataRange1d"},{"attributes":{"callback":null,"column_names":["index","x","y","y_mean","y_std","y_sem","lower","upper"],"data":{"index":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499],"lower":{"__ndarray__":"","dtype":"float64","shape":[2500]},"upper":{"__ndarray__":"","dtype":"float64","shape":[2500]},"x":{"__ndarray__":"","dtype":"float64","shape":[2500]},"y":{"__ndarray__":"","dtype":"float64","shape":[2500]},"y_mean":{"__ndarray__":"","dtype":"float64","shape":[2500]},"y_sem":{"__ndarray__":"","dtype":"float64","shape":[2500]},"y_std":{"__ndarray__":"4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDiLwN5cU8AQOIvA3lxTwBA4i8DeXFPAEDwouMKPL0AQAGgH1oKnQBA5I6ogA5+AECgyQnjP3kAQN25V2sqbABA6hwIYn9rAEA1OTNyn0UAQM7+HOVJUQBAbS9Z1MdvAEBvegTVmXIAQAqs93CHdABADinuwsVwAEAAcR15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","dtype":"float64","shape":[2500]}}},"id":"01ebb83f-af8f-4cf7-913c-c9b469764cdc","type":"ColumnDataSource"},{"attributes":{"fill_alpha":{"value":0.3},"fill_color":{"value":"#1f77b4"},"line_color":{"value":null},"size":{"units":"screen","value":5},"x":{"field":"x"},"y":{"field":"y"}},"id":"d18009ad-820c-4f43-8e55-44cb1c6da223","type":"Circle"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"#1f77b4"},"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"size":{"units":"screen","value":5},"x":{"field":"x"},"y":{"field":"y"}},"id":"95ae037a-9b81-4e42-9e3f-d784379c79f3","type":"Circle"},{"attributes":{},"id":"6af6a15d-4b0c-4ab0-880c-6d0ac3b3f62c","type":"BasicTickFormatter"},{"attributes":{},"id":"2910b770-613c-425c-a7e6-124914c4d4cd","type":"WheelZoomTool"},{"attributes":{"grid_line_color":{"value":null},"plot":{"id":"c832eee8-e57e-4bb6-9b7d-865f588ba44a","subtype":"Figure","type":"Plot"},"ticker":{"id":"f53cb6e3-c2a0-460d-8184-efe16e082126","type":"BasicTicker"}},"id":"ec5b19de-8bc7-4734-ac9b-057af384b583","type":"Grid"}],"root_ids":["c832eee8-e57e-4bb6-9b7d-865f588ba44a"]},"title":"Bokeh Application","version":"0.12.12"}}';
                  var render_items = [{"docid":"e206556d-0dc1-4228-81b9-d850fc212c3f","elementid":"1fe2b172-06ae-46b1-a842-42f9090d62c1","modelid":"c832eee8-e57e-4bb6-9b7d-865f588ba44a"}];
                  root.Bokeh.embed.embed_items(docs_json, render_items);
                
                  }
                  if (root.Bokeh !== undefined) {
                    embed_document(root);
                  } else {
                    var attempts = 0;
                    var timer = setInterval(function(root) {
                      if (root.Bokeh !== undefined) {
                        embed_document(root);
                        clearInterval(timer);
                      }
                      attempts++;
                      if (attempts > 100) {
                        console.log("Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing")
                        clearInterval(timer);
                      }
                    }, 10, root)
                  }
                })(window);
              });
            };
            if (document.readyState != "loading") fn();
            else document.addEventListener("DOMContentLoaded", fn);
          })();
        },
        function(Bokeh) {
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.css");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/css/ion.rangeSlider.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/css/ion.rangeSlider.css");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/css/ion.rangeSlider.skinFlat.min.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/css/ion.rangeSlider.skinFlat.min.css");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/img/sprite-skin-flat.png");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/img/sprite-skin-flat.png");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css");
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-0.12.12.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-0.12.12.min.css");
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.12.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.12.min.css");
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-tables-0.12.12.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-tables-0.12.12.min.css");
        }
      ];
    
      function run_inline_js() {
        
        for (var i = 0; i < inline_js.length; i++) {
          inline_js[i].call(root, root.Bokeh);
        }
        
      }
    
      if (root._bokeh_is_loading === 0) {
        console.log("Bokeh: BokehJS loaded, going straight to plotting");
        run_inline_js();
      } else {
        load_libs(js_urls, function() {
          console.log("Bokeh: BokehJS plotting callback run at", now());
          run_inline_js();
        });
      }
    }(window));
  };
  if (document.readyState != "loading") fn();
  else document.addEventListener("DOMContentLoaded", fn);
})();