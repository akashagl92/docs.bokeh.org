(function() {
  var fn = function() {
    
    (function(root) {
      function now() {
        return new Date();
      }
    
      var force = false;
    
      if (typeof (root._bokeh_onload_callbacks) === "undefined" || force === true) {
        root._bokeh_onload_callbacks = [];
        root._bokeh_is_loading = undefined;
      }
    
      
      
    
      
      
    
      function run_callbacks() {
        try {
          root._bokeh_onload_callbacks.forEach(function(callback) { callback() });
        }
        finally {
          delete root._bokeh_onload_callbacks
        }
        console.info("Bokeh: all callbacks have finished");
      }
    
      function load_libs(js_urls, callback) {
        root._bokeh_onload_callbacks.push(callback);
        if (root._bokeh_is_loading > 0) {
          console.log("Bokeh: BokehJS is being loaded, scheduling callback at", now());
          return null;
        }
        if (js_urls == null || js_urls.length === 0) {
          run_callbacks();
          return null;
        }
        console.log("Bokeh: BokehJS not loaded, scheduling load and callback at", now());
        root._bokeh_is_loading = js_urls.length;
        for (var i = 0; i < js_urls.length; i++) {
          var url = js_urls[i];
          var s = document.createElement('script');
          s.src = url;
          s.async = false;
          s.onreadystatechange = s.onload = function() {
            root._bokeh_is_loading--;
            if (root._bokeh_is_loading === 0) {
              console.log("Bokeh: all BokehJS libraries loaded");
              run_callbacks()
            }
          };
          s.onerror = function() {
            console.warn("failed to load library " + url);
          };
          console.log("Bokeh: injecting script tag for BokehJS library: ", url);
          document.getElementsByTagName("head")[0].appendChild(s);
        }
      };var element = document.getElementById("6e7ca638-ecaf-4e1d-9e38-b9db9ff8de3e");
      if (element == null) {
        console.log("Bokeh: ERROR: autoload.js configured with elementid '6e7ca638-ecaf-4e1d-9e38-b9db9ff8de3e' but no matching script tag was found. ")
        return false;
      }
    
      var js_urls = ["https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js", "https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/js/ion.rangeSlider.js", "https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-0.12.16.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.16.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-0.12.16.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-gl-0.12.16.min.js"];
    
      var inline_js = [
        function(Bokeh) {
          Bokeh.set_log_level("info");
        },
        
        function(Bokeh) {
          (function(root, factory) {
          //  if(typeof exports === 'object' && typeof module === 'object')
          //    factory(require("Bokeh"));
          //  else if(typeof define === 'function' && define.amd)
          //    define(["Bokeh"], factory);
          //  else if(typeof exports === 'object')
          //    factory(require("Bokeh"));
          //  else
              factory(root["Bokeh"]);
          })(this, function(Bokeh) {
            var define;
            return (function outer(modules, entry) {
            if (Bokeh != null) {
              return Bokeh.register_plugin(modules, {}, entry);
            } else {
              throw new Error("Cannot find Bokeh. You have to load it prior to loading plugins.");
            }
          })
          ({
            "custom/main": function(require, module, exports) {
              var models = {
                "DrawTool": require("custom/bk_script_4fe1a953f37e440bafdcb3330a4881eb.draw_tool").DrawTool,
          "MyFormatter": require("custom/bk_script_536909578ebd4dd59dc108ec1a737cb4.my_formatter").MyFormatter,
          "Custom": require("custom/bk_script_70142c597e884531a4514c3c604a86cc.custom").Custom,
          "Surface3d": require("custom/bk_script_9331c4d2a2fa432ba11140b0ec446e88.surface3d").Surface3d,
          "LatexLabel": require("custom/bk_script_da3193bc49874d5cb629b293ffd9b45e.latex_label").LatexLabel,
          "IonRangeSlider": require("custom/bk_script_dcecbfa28a734a4dba3108d34a44fd8d.ion_range_slider").IonRangeSlider
              };
              require("base").register_models(models);
              module.exports = models;
            },
            "custom/bk_script_4fe1a953f37e440bafdcb3330a4881eb.draw_tool": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var p = require("core/properties");
          var gesture_tool_1 = require("models/tools/gestures/gesture_tool");
          exports.DrawToolView = /** @class */ (function (_super) {
              __extends(DrawToolView, _super);
              function DrawToolView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              // this is executed when the pan/drag event starts
              DrawToolView.prototype._pan_start = function (e) {
                  return this.model.source.data = {
                      x: [],
                      y: []
                  };
              };
              // this is executed on subsequent mouse/touch moves
              DrawToolView.prototype._pan = function (e) {
                  var frame, sx, sy, x, y;
                  frame = this.plot_model.frame;
                  (sx = e.sx, sy = e.sy);
                  if (!frame.bbox.contains(sx, sy)) {
                      return null;
                  }
                  x = frame.xscales['default'].invert(sx);
                  y = frame.yscales['default'].invert(sy);
                  this.model.source.data.x.push(x);
                  this.model.source.data.y.push(y);
                  return this.model.source.change.emit();
              };
              // this is executed then the pan/drag ends
              DrawToolView.prototype._pan_end = function (e) {
                  return null;
              };
              return DrawToolView;
          }(gesture_tool_1.GestureToolView));
          exports.DrawTool = (function () {
              var DrawTool = /** @class */ (function (_super) {
                  __extends(DrawTool, _super);
                  function DrawTool() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  return DrawTool;
              }(gesture_tool_1.GestureTool));
              ;
              DrawTool.prototype.default_view = exports.DrawToolView;
              DrawTool.prototype.type = "DrawTool";
              DrawTool.prototype.tool_name = "Drag Span";
              DrawTool.prototype.icon = "bk-tool-icon-lasso-select";
              DrawTool.prototype.event_type = "pan";
              DrawTool.prototype.default_order = 12;
              DrawTool.define({
                  source: [p.Instance]
              });
              return DrawTool;
          })();
    
          },
          "custom/bk_script_536909578ebd4dd59dc108ec1a737cb4.my_formatter": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var tick_formatter_1 = require("models/formatters/tick_formatter");
          exports.MyFormatter = (function () {
              var MyFormatter = /** @class */ (function (_super) {
                  __extends(MyFormatter, _super);
                  function MyFormatter() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  // TickFormatters should implement this method, which accepts a lisst
                  // of numbers (ticks) and returns a list of strings
                  MyFormatter.prototype.doFormat = function (ticks) {
                      var formatted, i, j, ref;
                      // format the first tick as-is
                      formatted = ["" + ticks[0]];
                      // format the remaining ticks as a difference from the first
                      for (i = j = 1, ref = ticks.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
                          formatted.push("+" + (ticks[i] - ticks[0]).toPrecision(2));
                      }
                      return formatted;
                  };
                  return MyFormatter;
              }(tick_formatter_1.TickFormatter));
              ;
              MyFormatter.prototype.type = "MyFormatter";
              return MyFormatter;
          })();
    
          },
          "custom/bk_script_70142c597e884531a4514c3c604a86cc.custom": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var dom_1 = require("core/dom");
          var p = require("core/properties");
          var layout_dom_1 = require("models/layouts/layout_dom");
          var CustomView = /** @class */ (function (_super) {
              __extends(CustomView, _super);
              function CustomView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              CustomView.prototype.initialize = function (options) {
                  var _this = this;
                  _super.prototype.initialize.call(this, options);
                  this.render();
                  // Set BokehJS listener so that when the Bokeh slider has a change
                  // event, we can process the new data
                  this.connect(this.model.slider.change, function () { return _this.render(); });
              };
              CustomView.prototype.render = function () {
                  // BokehjS Views create <div> elements by default, accessible as
                  // ``this.el``. Many Bokeh views ignore this default <div>, and instead
                  // do things like draw to the HTML canvas. In this case though, we change
                  // the contents of the <div>, based on the current slider value.
                  dom_1.empty(this.el);
                  this.el.appendChild(dom_1.div({
                      style: {
                          'padding': '2px',
                          'color': '#b88d8e',
                          'background-color': '#2a3153',
                      },
                  }, this.model.text + ": " + this.model.slider.value));
              };
              return CustomView;
          }(layout_dom_1.LayoutDOMView));
          exports.CustomView = CustomView;
          var Custom = /** @class */ (function (_super) {
              __extends(Custom, _super);
              function Custom() {
                  var _this = _super !== null && _super.apply(this, arguments) || this;
                  // If there is an associated view, this is typically boilerplate.
                  _this.default_view = CustomView;
                  // The ``type`` class attribute should generally match exactly the name
                  // of the corresponding Python class.
                  _this.type = "Custom";
                  return _this;
              }
              return Custom;
          }(layout_dom_1.LayoutDOM));
          exports.Custom = Custom;
          // The @define block adds corresponding "properties" to the JS model. These
          // should normally line up 1-1 with the Python model class. Most property
          // types have counterparts, e.g. bokeh.core.properties.String will be
          // ``p.String`` in the JS implementation. Any time the JS type system is not
          // yet as complete, you can use ``p.Any`` as a "wildcard" property type.
          Custom.define({
              text: [p.String],
              slider: [p.Any],
          });
    
          },
          "custom/bk_script_9331c4d2a2fa432ba11140b0ec446e88.surface3d": function(require, module, exports) {
          "use strict";
          // This file contains the JavaScript (CoffeeScript) implementation
          // for a Bokeh custom extension. The "surface3d.py" contains the
          // python counterpart.
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          // This custom model wraps one part of the third-party vis.js library:
          //     http://visjs.org/index.html
          // Making it easy to hook up python data analytics tools (NumPy, SciPy,
          // Pandas, etc.) to web presentations using the Bokeh server.
          // These "require" lines are similar to python "import" statements
          var OPTIONS;
          var p = require("core/properties");
          var layout_dom_1 = require("models/layouts/layout_dom");
          // This defines some default options for the Graph3d feature of vis.js
          // See: http://visjs.org/graph3d_examples.html for more details.
          OPTIONS = {
              width: '600px',
              height: '600px',
              style: 'surface',
              showPerspective: true,
              showGrid: true,
              keepAspectRatio: true,
              verticalRatio: 1.0,
              legendLabel: 'stuff',
              cameraPosition: {
                  horizontal: -0.35,
                  vertical: 0.22,
                  distance: 1.8
              }
          };
          // To create custom model extensions that will render on to the HTML canvas
          // or into the DOM, we must create a View subclass for the model.
          // In this case we will subclass from the existing BokehJS ``LayoutDOMView``
          exports.Surface3dView = /** @class */ (function (_super) {
              __extends(Surface3dView, _super);
              function Surface3dView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              Surface3dView.prototype.initialize = function (options) {
                  var _this = this;
                  var script, url;
                  _super.prototype.initialize.call(this, options);
                  url = "https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.min.js";
                  script = document.createElement('script');
                  script.src = url;
                  script.async = false;
                  script.onreadystatechange = script.onload = function () {
                      return _this._init();
                  };
                  return document.querySelector("head").appendChild(script);
              };
              Surface3dView.prototype._init = function () {
                  // Create a new Graph3s using the vis.js API. This assumes the vis.js has
                  // already been loaded (e.g. in a custom app template). In the future Bokeh
                  // models will be able to specify and load external scripts automatically.
                  var _this = this;
                  // BokehJS Views create <div> elements by default, accessible as @el. Many
                  // Bokeh views ignore this default <div>, and instead do things like draw
                  // to the HTML canvas. In this case though, we use the <div> to attach a
                  // Graph3d to the DOM.
                  this._graph = new vis.Graph3d(this.el, this.get_data(), OPTIONS);
                  // Set a listener so that when the Bokeh data source has a change
                  // event, we can process the new data
                  return this.connect(this.model.data_source.change, function () {
                      return _this._graph.setData(_this.get_data());
                  });
              };
              // This is the callback executed when the Bokeh data has an change. Its basic
              // function is to adapt the Bokeh data source to the vis.js DataSet format.
              Surface3dView.prototype.get_data = function () {
                  var data, i, j, ref, source;
                  data = new vis.DataSet();
                  source = this.model.data_source;
                  for (i = j = 0, ref = source.get_length(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                      data.add({
                          x: source.get_column(this.model.x)[i],
                          y: source.get_column(this.model.y)[i],
                          z: source.get_column(this.model.z)[i]
                      });
                  }
                  return data;
              };
              return Surface3dView;
          }(layout_dom_1.LayoutDOMView));
          exports.Surface3d = (function () {
              // We must also create a corresponding JavaScript BokehJS model subclass to
              // correspond to the python Bokeh model subclass. In this case, since we want
              // an element that can position itself in the DOM according to a Bokeh layout,
              // we subclass from ``LayoutDOM``
              var Surface3d = /** @class */ (function (_super) {
                  __extends(Surface3d, _super);
                  function Surface3d() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  return Surface3d;
              }(layout_dom_1.LayoutDOM));
              ;
              // This is usually boilerplate. In some cases there may not be a view.
              Surface3d.prototype.default_view = exports.Surface3dView;
              // The ``type`` class attribute should generally match exactly the name
              // of the corresponding Python class.
              Surface3d.prototype.type = "Surface3d";
              // The @define block adds corresponding "properties" to the JS model. These
              // should basically line up 1-1 with the Python model class. Most property
              // types have counterparts, e.g. ``bokeh.core.properties.String`` will be
              // ``p.String`` in the JS implementatin. Where the JS type system is not yet
              // as rich, you can use ``p.Any`` as a "wildcard" property type.
              Surface3d.define({
                  x: [p.String],
                  y: [p.String],
                  z: [p.String],
                  data_source: [p.Instance]
              });
              return Surface3d;
          })();
    
          },
          "custom/bk_script_da3193bc49874d5cb629b293ffd9b45e.latex_label": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var label_1 = require("models/annotations/label");
          exports.LatexLabelView = /** @class */ (function (_super) {
              __extends(LatexLabelView, _super);
              function LatexLabelView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              LatexLabelView.prototype.render = function () {
                  var angle, panel, ref, sx, sy, xscale, yscale;
                  //--- Start of copied section from ``Label.render`` implementation
                  // Here because AngleSpec does units tranform and label doesn't support specs
                  switch (this.model.angle_units) {
                      case "rad":
                          angle = -1 * this.model.angle;
                          break;
                      case "deg":
                          angle = -1 * this.model.angle * Math.PI / 180.0;
                  }
                  panel = (ref = this.model.panel) != null ? ref : this.plot_view.frame;
                  xscale = this.plot_view.frame.xscales[this.model.x_range_name];
                  yscale = this.plot_view.frame.yscales[this.model.y_range_name];
                  sx = this.model.x_units === "data" ? xscale.compute(this.model.x) : panel.xview.compute(this.model.x);
                  sy = this.model.y_units === "data" ? yscale.compute(this.model.y) : panel.yview.compute(this.model.y);
                  sx += this.model.x_offset;
                  sy -= this.model.y_offset;
                  //--- End of copied section from ``Label.render`` implementation
                  // Must render as superpositioned div (not on canvas) so that KaTex
                  // css can properly style the text
                  this._css_text(this.plot_view.canvas_view.ctx, "", sx, sy, angle);
                  // ``katex`` is loaded into the global window at runtime
                  // katex.renderToString returns a html ``span`` element
                  return katex.render(this.model.text, this.el, {
                      displayMode: true
                  });
              };
              return LatexLabelView;
          }(label_1.LabelView));
          exports.LatexLabel = (function () {
              var LatexLabel = /** @class */ (function (_super) {
                  __extends(LatexLabel, _super);
                  function LatexLabel() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  return LatexLabel;
              }(label_1.Label));
              ;
              LatexLabel.prototype.type = 'LatexLabel';
              LatexLabel.prototype.default_view = exports.LatexLabelView;
              return LatexLabel;
          })();
    
          },
          "custom/bk_script_dcecbfa28a734a4dba3108d34a44fd8d.ion_range_slider": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var callback_1 = require("core/util/callback");
          var p = require("core/properties");
          var dom_1 = require("core/dom");
          var input_widget_1 = require("models/widgets/input_widget");
          // This model will actually need to render things, so we must provide
          // view. The LayoutDOM model has a view already, so we will start with that
          exports.IonRangeSliderView = /** @class */ (function (_super) {
              __extends(IonRangeSliderView, _super);
              function IonRangeSliderView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              IonRangeSliderView.prototype._createElement = function () {
                  var el;
                  el = _super.prototype._createElement.call(this);
                  this.$el = $(el);
                  return el;
              };
              IonRangeSliderView.prototype.template = function () {
                  var title, value;
                  if (this.model.title != null) {
                      if (this.model.title.length !== 0) {
                          title = dom_1.label({
                              for: this.model.id
                          }, " " + this.model.title + ": ");
                      }
                      value = dom_1.input({
                          type: "text",
                          id: this.model.id,
                          readonly: true
                      });
                  }
                  return dom_1.div({
                      class: "bk-slider-parent"
                  }, title, value, dom_1.div({
                      class: "bk-slider-horizontal"
                  }, dom_1.input({
                      type: "text",
                      class: "slider",
                      id: this.model.id
                  })));
              };
              IonRangeSliderView.prototype.initialize = function (options) {
                  _super.prototype.initialize.call(this, options);
                  this.connect(this.model.change, this.render);
                  dom_1.empty(this.el);
                  this.el.appendChild(this.template());
                  this.callbackWrapper = null;
                  if (this.model.callback_policy === 'continuous') {
                      this.callbackWrapper = function () {
                          var ref;
                          return (ref = this.model.callback) != null ? ref.execute(this.model) : void 0;
                      };
                  }
                  if (this.model.callback_policy === 'throttle' && this.model.callback) {
                      this.callbackWrapper = callback_1.throttle(function () {
                          var ref;
                          return (ref = this.model.callback) != null ? ref.execute(this.model) : void 0;
                      }, this.model.callback_throttle);
                  }
                  return this.render();
              };
              IonRangeSliderView.prototype.render = function () {
                  var _this = this;
                  var disable, from, grid, inp, max, min, opts, range, slider, step, to;
                  // BokehJS Views create <div> elements by default, accessible as @$el.
                  // Many Bokeh views ignore this default <div>, and instead do things
                  // like draw to the HTML canvas. In this case though, we change the
                  // contents of the <div>, based on the current slider value.
                  _super.prototype.render.call(this);
                  // Set up parameters
                  max = this.model.end;
                  min = this.model.start;
                  grid = this.model.grid;
                  disable = this.model.disabled;
                  range = this.model.range || [max, min];
                  from = range[0], to = range[1];
                  step = this.model.step || ((max - min) / 50);
                  opts = {
                      type: "double",
                      grid: grid,
                      min: min,
                      max: max,
                      from: from,
                      to: to,
                      step: step,
                      disable: disable,
                      onChange: function (data) {
                          return _this.slide(data);
                      },
                      onFinish: function (data) {
                          return _this.slidestop(data);
                      }
                  };
                  inp = this.$el.find('.slider')[0];
                  slider = jQuery(inp).ionRangeSlider(opts);
                  range = [from, to];
                  this.$el.find("#" + this.model.id).val(range.join(' - '));
                  this.$el.find('.bk-slider-parent').height(this.model.height);
                  return this;
              };
              IonRangeSliderView.prototype.slidestop = function (data) {
                  var ref;
                  if (this.model.callback_policy === 'mouseup' || this.model.callback_policy === 'throttle') {
                      return (ref = this.model.callback) != null ? ref.execute(this.model) : void 0;
                  }
              };
              IonRangeSliderView.prototype.slide = function (data) {
                  var range, value;
                  range = [data.from, data.to];
                  value = range.join(' - ');
                  this.$el.find("#" + this.model.id).val(value);
                  this.model.range = range;
                  if (this.callbackWrapper) {
                      return this.callbackWrapper();
                  }
              };
              return IonRangeSliderView;
          }(input_widget_1.InputWidgetView));
          exports.IonRangeSlider = (function () {
              var IonRangeSlider = /** @class */ (function (_super) {
                  __extends(IonRangeSlider, _super);
                  function IonRangeSlider() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  return IonRangeSlider;
              }(input_widget_1.InputWidget));
              ;
              // If there is an associated view, this is boilerplate.
              IonRangeSlider.prototype.default_view = exports.IonRangeSliderView;
              // The ``type`` class attribute should generally match exactly the name
              // of the corresponding Python class.
              IonRangeSlider.prototype.type = "IonRangeSlider";
              // The @define block adds corresponding "properties" to the JS model. These
              // should basically line up 1-1 with the Python model class. Most property
              // types have counterparts, e.g. bokeh.core.properties.String will be
              // p.String in the JS implementation. Where the JS type system is not yet
              // as rich, you can use p.Any as a "wildcard" property type.
              IonRangeSlider.define({
                  range: [p.Any],
                  start: [p.Number, 0],
                  end: [p.Number, 1],
                  step: [p.Number, 0.1],
                  grid: [p.Bool, true],
                  callback_throttle: [p.Number, 200],
                  callback_policy: [p.String, "throttle"]
              });
              return IonRangeSlider;
          })();
    
          }
          }, "custom/main");
          ;
          });
    
        },
        
        function(Bokeh) {
          (function() {
            var fn = function() {
              Bokeh.safely(function() {
                (function(root) {
                  function embed_document(root) {
                    
                  var docs_json = '{"6ffca099-4097-4f91-97cd-153d97376bba":{"roots":{"references":[{"attributes":{"dimension":1,"grid_line_alpha":{"value":0.5},"plot":{"id":"af5a1107-9abb-4a4c-a614-bcfcff45a4e1","subtype":"Figure","type":"Plot"},"ticker":{"id":"6ca00e09-d8f5-4d24-a22a-08a6a599b41d","type":"BasicTicker"}},"id":"2365ec35-fe2f-4157-8799-488581ee9473","type":"Grid"},{"attributes":{},"id":"1a563623-b687-4443-b574-4d12fa4f79ac","type":"BasicTickFormatter"},{"attributes":{"plot":null,"text":"Rolling Standard Deviation"},"id":"b863f5a5-1c8f-422d-b36d-e2dc61271e2f","type":"Title"},{"attributes":{},"id":"6a3280d6-4e1c-472e-96d8-f17a45377012","type":"WheelZoomTool"},{"attributes":{},"id":"1e21f146-330c-49e0-84c6-42b7c62a8a15","type":"BasicTicker"},{"attributes":{"overlay":{"id":"781c7b12-1aec-49cc-917a-3beeea1cf337","type":"BoxAnnotation"}},"id":"0d85048e-bcf5-436b-877e-1dbba2745589","type":"BoxZoomTool"},{"attributes":{"callback":null},"id":"eeb19eea-63a6-4ea8-8a85-aea30e4d4b64","type":"DataRange1d"},{"attributes":{"data_source":{"id":"95ccd6f3-cb92-4ccb-98a4-4dd105c5187f","type":"ColumnDataSource"},"glyph":{"id":"db179edf-bcbd-48f4-89b3-ff1225abde8e","type":"Circle"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"e1cf16cf-6348-4536-b607-7d5a5682d9b1","type":"Circle"},"selection_glyph":null,"view":{"id":"ee0b16ec-694c-4022-a8f9-bb71aad11ccd","type":"CDSView"}},"id":"b984eec4-6f98-446b-9642-cd86908a9242","type":"GlyphRenderer"},{"attributes":{},"id":"bbe990d7-8f0b-494a-8aa7-7c4027315481","type":"PanTool"},{"attributes":{"fill_alpha":{"value":0.3},"fill_color":{"value":"#1f77b4"},"line_color":{"value":null},"size":{"units":"screen","value":5},"x":{"field":"x"},"y":{"field":"y"}},"id":"db179edf-bcbd-48f4-89b3-ff1225abde8e","type":"Circle"},{"attributes":{},"id":"d8400873-a7df-4de9-8711-cb21b15a40b7","type":"ResetTool"},{"attributes":{"callback":null},"id":"57cda4b4-a4f4-4b4b-bb4f-fc09587bcd34","type":"DataRange1d"},{"attributes":{},"id":"75f296c8-2b76-469a-8d8a-75fd3d20b4f5","type":"LinearScale"},{"attributes":{},"id":"be77b0d2-9ba2-4ef4-beff-7b2e50ad326e","type":"SaveTool"},{"attributes":{},"id":"bcf37046-0ad4-4202-bda5-463988de929d","type":"LinearScale"},{"attributes":{},"id":"c94469ca-b9f3-4f39-9749-9d392ae119e4","type":"BasicTickFormatter"},{"attributes":{"bottom_units":"screen","fill_alpha":{"value":0.5},"fill_color":{"value":"lightgrey"},"left_units":"screen","level":"overlay","line_alpha":{"value":1.0},"line_color":{"value":"black"},"line_dash":[4,4],"line_width":{"value":2},"plot":null,"render_mode":"css","right_units":"screen","top_units":"screen"},"id":"781c7b12-1aec-49cc-917a-3beeea1cf337","type":"BoxAnnotation"},{"attributes":{"grid_line_color":{"value":null},"plot":{"id":"af5a1107-9abb-4a4c-a614-bcfcff45a4e1","subtype":"Figure","type":"Plot"},"ticker":{"id":"1e21f146-330c-49e0-84c6-42b7c62a8a15","type":"BasicTicker"}},"id":"1c792105-a9ab-42ad-a58d-6638d2b4e761","type":"Grid"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"#1f77b4"},"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"size":{"units":"screen","value":5},"x":{"field":"x"},"y":{"field":"y"}},"id":"e1cf16cf-6348-4536-b607-7d5a5682d9b1","type":"Circle"},{"attributes":{"axis_label":"X","formatter":{"id":"c94469ca-b9f3-4f39-9749-9d392ae119e4","type":"BasicTickFormatter"},"plot":{"id":"af5a1107-9abb-4a4c-a614-bcfcff45a4e1","subtype":"Figure","type":"Plot"},"ticker":{"id":"1e21f146-330c-49e0-84c6-42b7c62a8a15","type":"BasicTicker"}},"id":"d307987c-f1ef-443f-98e6-07f3d81f6b7c","type":"LinearAxis"},{"attributes":{"callback":null,"data":{"index":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499],"lower":{"__ndarray__":"Sh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEBKHtktcbUIQEoe2S1xtQhASh7ZLXG1CEDw2ZrMkucIQFewFrsNkAlAW71uZeaHCUBFmQHAcR4KQOiSziIaPQpAJi8JpAMICkA4egt72oAKQFHkE/GVbQpAuvTODsWfCUCKjA7gp6YJQFZRntowCwpAckSERapGCkC9/hdp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","dtype":"float64","shape":[2500]},"upper":{"__ndarray__":"","dtype":"float64","shape":[2500]},"x":{"__ndarray__":"","dtype":"float64","shape":[2500]},"y":{"__ndarray__":"","dtype":"float64","shape":[2500]},"y_mean":{"__ndarray__":"","dtype":"float64","shape":[2500]},"y_sem":{"__ndarray__":"","dtype":"float64","shape":[2500]},"y_std":{"__ndarray__":"","dtype":"float64","shape":[2500]}},"selected":{"id":"2ffc3e90-a7ed-491a-aa60-2265bccacda9","type":"Selection"},"selection_policy":{"id":"87fe2953-0440-4092-9c4a-c697e568a702","type":"UnionRenderers"}},"id":"95ccd6f3-cb92-4ccb-98a4-4dd105c5187f","type":"ColumnDataSource"},{"attributes":{"source":{"id":"95ccd6f3-cb92-4ccb-98a4-4dd105c5187f","type":"ColumnDataSource"}},"id":"ee0b16ec-694c-4022-a8f9-bb71aad11ccd","type":"CDSView"},{"attributes":{},"id":"87fe2953-0440-4092-9c4a-c697e568a702","type":"UnionRenderers"},{"attributes":{},"id":"2ffc3e90-a7ed-491a-aa60-2265bccacda9","type":"Selection"},{"attributes":{},"id":"6ca00e09-d8f5-4d24-a22a-08a6a599b41d","type":"BasicTicker"},{"attributes":{"below":[{"id":"d307987c-f1ef-443f-98e6-07f3d81f6b7c","type":"LinearAxis"}],"left":[{"id":"a4262e31-d0f2-45a2-b6ca-83dae9f0d10a","type":"LinearAxis"}],"renderers":[{"id":"d307987c-f1ef-443f-98e6-07f3d81f6b7c","type":"LinearAxis"},{"id":"1c792105-a9ab-42ad-a58d-6638d2b4e761","type":"Grid"},{"id":"a4262e31-d0f2-45a2-b6ca-83dae9f0d10a","type":"LinearAxis"},{"id":"2365ec35-fe2f-4157-8799-488581ee9473","type":"Grid"},{"id":"781c7b12-1aec-49cc-917a-3beeea1cf337","type":"BoxAnnotation"},{"id":"b984eec4-6f98-446b-9642-cd86908a9242","type":"GlyphRenderer"},{"id":"9264fe9a-a3c7-40a3-900e-f9aef4c23baa","type":"Band"}],"title":{"id":"b863f5a5-1c8f-422d-b36d-e2dc61271e2f","type":"Title"},"toolbar":{"id":"927cf4f8-c891-4b22-bdb9-41299675ed39","type":"Toolbar"},"x_range":{"id":"57cda4b4-a4f4-4b4b-bb4f-fc09587bcd34","type":"DataRange1d"},"x_scale":{"id":"75f296c8-2b76-469a-8d8a-75fd3d20b4f5","type":"LinearScale"},"y_range":{"id":"eeb19eea-63a6-4ea8-8a85-aea30e4d4b64","type":"DataRange1d"},"y_scale":{"id":"bcf37046-0ad4-4202-bda5-463988de929d","type":"LinearScale"}},"id":"af5a1107-9abb-4a4c-a614-bcfcff45a4e1","subtype":"Figure","type":"Plot"},{"attributes":{"active_drag":"auto","active_inspect":"auto","active_scroll":"auto","active_tap":"auto","tools":[{"id":"bbe990d7-8f0b-494a-8aa7-7c4027315481","type":"PanTool"},{"id":"6a3280d6-4e1c-472e-96d8-f17a45377012","type":"WheelZoomTool"},{"id":"0d85048e-bcf5-436b-877e-1dbba2745589","type":"BoxZoomTool"},{"id":"d8400873-a7df-4de9-8711-cb21b15a40b7","type":"ResetTool"},{"id":"be77b0d2-9ba2-4ef4-beff-7b2e50ad326e","type":"SaveTool"}]},"id":"927cf4f8-c891-4b22-bdb9-41299675ed39","type":"Toolbar"},{"attributes":{"axis_label":"Y","formatter":{"id":"1a563623-b687-4443-b574-4d12fa4f79ac","type":"BasicTickFormatter"},"plot":{"id":"af5a1107-9abb-4a4c-a614-bcfcff45a4e1","subtype":"Figure","type":"Plot"},"ticker":{"id":"6ca00e09-d8f5-4d24-a22a-08a6a599b41d","type":"BasicTicker"}},"id":"a4262e31-d0f2-45a2-b6ca-83dae9f0d10a","type":"LinearAxis"},{"attributes":{"base":{"field":"x","units":"data"},"fill_alpha":{"value":1.0},"level":"underlay","line_color":{"value":"black"},"lower":{"field":"lower","units":"data"},"plot":{"id":"af5a1107-9abb-4a4c-a614-bcfcff45a4e1","subtype":"Figure","type":"Plot"},"source":{"id":"95ccd6f3-cb92-4ccb-98a4-4dd105c5187f","type":"ColumnDataSource"},"upper":{"field":"upper","units":"data"}},"id":"9264fe9a-a3c7-40a3-900e-f9aef4c23baa","type":"Band"}],"root_ids":["af5a1107-9abb-4a4c-a614-bcfcff45a4e1"]},"title":"Bokeh Application","version":"0.12.16"}}';
                  var render_items = [{"docid":"6ffca099-4097-4f91-97cd-153d97376bba","elementid":"6e7ca638-ecaf-4e1d-9e38-b9db9ff8de3e","modelid":"af5a1107-9abb-4a4c-a614-bcfcff45a4e1"}];
                  root.Bokeh.embed.embed_items(docs_json, render_items);
                
                  }
                  if (root.Bokeh !== undefined) {
                    embed_document(root);
                  } else {
                    var attempts = 0;
                    var timer = setInterval(function(root) {
                      if (root.Bokeh !== undefined) {
                        embed_document(root);
                        clearInterval(timer);
                      }
                      attempts++;
                      if (attempts > 100) {
                        console.log("Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing")
                        clearInterval(timer);
                      }
                    }, 10, root)
                  }
                })(window);
              });
            };
            if (document.readyState != "loading") fn();
            else document.addEventListener("DOMContentLoaded", fn);
          })();
        },
        function(Bokeh) {
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.css");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/css/ion.rangeSlider.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/css/ion.rangeSlider.css");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/css/ion.rangeSlider.skinFlat.min.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/css/ion.rangeSlider.skinFlat.min.css");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/img/sprite-skin-flat.png");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/img/sprite-skin-flat.png");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css");
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-0.12.16.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-0.12.16.min.css");
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.16.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.16.min.css");
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-tables-0.12.16.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-tables-0.12.16.min.css");
        }
      ];
    
      function run_inline_js() {
        
        for (var i = 0; i < inline_js.length; i++) {
          inline_js[i].call(root, root.Bokeh);
        }
        
      }
    
      if (root._bokeh_is_loading === 0) {
        console.log("Bokeh: BokehJS loaded, going straight to plotting");
        run_inline_js();
      } else {
        load_libs(js_urls, function() {
          console.log("Bokeh: BokehJS plotting callback run at", now());
          run_inline_js();
        });
      }
    }(window));
  };
  if (document.readyState != "loading") fn();
  else document.addEventListener("DOMContentLoaded", fn);
})();