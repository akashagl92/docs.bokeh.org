document.addEventListener("DOMContentLoaded", function(event) {
    
    (function(global) {
      function now() {
        return new Date();
      }
    
      var force = "";
    
      if (typeof (window._bokeh_onload_callbacks) === "undefined" || force !== "") {
        window._bokeh_onload_callbacks = [];
        window._bokeh_is_loading = undefined;
      }
    
    
      
      
    
      function run_callbacks() {
        window._bokeh_onload_callbacks.forEach(function(callback) { callback() });
        delete window._bokeh_onload_callbacks
        console.info("Bokeh: all callbacks have finished");
      }
    
      function load_libs(js_urls, callback) {
        window._bokeh_onload_callbacks.push(callback);
        if (window._bokeh_is_loading > 0) {
          console.log("Bokeh: BokehJS is being loaded, scheduling callback at", now());
          return null;
        }
        if (js_urls == null || js_urls.length === 0) {
          run_callbacks();
          return null;
        }
        console.log("Bokeh: BokehJS not loaded, scheduling load and callback at", now());
        window._bokeh_is_loading = js_urls.length;
        for (var i = 0; i < js_urls.length; i++) {
          var url = js_urls[i];
          var s = document.createElement('script');
          s.src = url;
          s.async = false;
          s.onreadystatechange = s.onload = function() {
            window._bokeh_is_loading--;
            if (window._bokeh_is_loading === 0) {
              console.log("Bokeh: all BokehJS libraries loaded");
              run_callbacks()
            }
          };
          s.onerror = function() {
            console.warn("failed to load library " + url);
          };
          console.log("Bokeh: injecting script tag for BokehJS library: ", url);
          document.getElementsByTagName("head")[0].appendChild(s);
        }
      };var element = document.getElementById("99b6d9e4-743e-4667-8a9d-20c58b56073f");
      if (element == null) {
        console.log("Bokeh: ERROR: autoload.js configured with elementid '99b6d9e4-743e-4667-8a9d-20c58b56073f' but no matching script tag was found. ")
        return false;
      }
    
      var js_urls = ['https://cdn.bokeh.org/bokeh/release/bokeh-0.12.2.min.js', 'https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.2.min.js', 'https://cdn.bokeh.org/bokeh/release/bokeh-compiler-0.12.2.min.js', 'https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.js'];
    
      var inline_js = [
        function(Bokeh) {
          Bokeh.set_log_level("info");
        },
        
        function(Bokeh) {
          
          (function outer(modules, cache, entry) {
            if (typeof Bokeh !== "undefined") {
              for (var name in modules) {
                var module = modules[name];
          
                if (typeof(module) === "string") {
                  try {
                    coffee = Bokeh.require("coffee-script")
                  } catch (e) {
                    throw new Error("Compiler requested but failed to import. Make sure bokeh-compiler(-min).js was included.")
                  }
          
                  function compile(code) {
                    var body = coffee.compile(code, {bare: true, shiftLine: true});
                    return new Function("require", "module", "exports", body);
                  }
          
                  modules[name] = [compile(module), {}];
                }
              }
          
              for (var name in modules) {
                Bokeh.require.modules[name] = modules[name];
              }
          
              for (var i = 0; i < entry.length; i++) {
                Bokeh.Models.register_locations(Bokeh.require(entry[i]));
              }
            } else {
              throw new Error("Cannot find Bokeh. You have to load it prior to loading plugins.");
            }
          })({
           "custom/main":[function(require,module,exports){
             module.exports = { Custom: require("custom/custom"),
          DrawTool: require("custom/draw_tool"),
          LatexLabel: require("custom/latex_label"),
          MyFormatter: require("custom/my_formatter"),
          Surface3d: require("custom/surface3d") };
           }, {}],
           "custom/custom": "\n_ = require \"underscore\"\n$ = require \"jquery\"\n\np = require \"core/properties\"\nLayoutDOM = require \"models/layouts/layout_dom\"\n\nclass CustomView extends LayoutDOM.View\n\n  initialize: (options) ->\n    super(options)\n\n    @render()\n\n    # Set Backbone listener so that when the Bokeh slider has a change\n    # event, we can process the new data\n    @listenTo(@model.slider, \'change\', () => @render())\n\n  render: () ->\n    # Backbone Views create <div> elements by default, accessible as @$el.\n    # Many Bokeh views ignore this default <div>, and instead do things\n    # like draw to the HTML canvas. In this case though, we change the\n    # contents of the <div>, based on the current slider value.\n    @$el.html(\"<h1>#{ @model.text }: #{ @model.slider.value }</h1>\")\n    @$(\'h1\').css({ \'color\': \'#686d8e\', \'background-color\': \'#2a3153\' })\n\nclass Custom extends LayoutDOM.Model\n\n  # If there is an associated view, this is boilerplate.\n  default_view: CustomView\n\n  # The ``type`` class attribute should generally match exactly the name\n  # of the corresponding Python class.\n  type: \"Custom\"\n\n  # The @define block adds corresponding \"properties\" to the JS model. These\n  # should basically line up 1-1 with the Python model class. Most property\n  # types have counterparts, e.g. bokeh.core.properties.String will be\n  # p.String in the JS implementation. Where the JS type system is not yet\n  # as rich, you can use p.Any as a \"wildcard\" property type.\n  @define {\n    text:   [ p.String ]\n    slider: [ p.Any    ]\n  }\n\n# This is boilerplate. Every implementation should export a Model\n# and (when applicable) also a View.\nmodule.exports =\n  Model: Custom\n  View: CustomView\n",
          "custom/draw_tool": "\np = require \"core/properties\"\nGestureTool = require \"models/tools/gestures/gesture_tool\"\n\nclass DrawToolView extends GestureTool.View\n\n  # this is executed when the pan/drag event starts\n  _pan_start: (e) ->\n    @model.source.data = {x: [], y: []}\n\n  # this is executed on subsequent mouse/touch moves\n  _pan: (e) ->\n    frame = @plot_model.frame\n    canvas = @plot_view.canvas\n\n    vx = canvas.sx_to_vx(e.bokeh.sx)\n    vy = canvas.sy_to_vy(e.bokeh.sy)\n    if not frame.contains(vx, vy)\n      return null\n\n    x = frame.get(\'x_mappers\').default.map_from_target(vx)\n    y = frame.get(\'y_mappers\').default.map_from_target(vy)\n\n    @model.source.data.x.push(x)\n    @model.source.data.y.push(y)\n    @model.source.trigger(\'change\')\n\n  # this is executed then the pan/drag ends\n  _pan_end: (e) -> return null\n\nclass DrawTool extends GestureTool.Model\n  default_view: DrawToolView\n  type: \"DrawTool\"\n\n  tool_name: \"Drag Span\"\n  icon: \"bk-tool-icon-lasso-select\"\n  event_type: \"pan\"\n  default_order: 12\n\n  @define { source: [ p.Instance ] }\n\nmodule.exports =\n  Model: DrawTool\n  View: DrawToolView\n",
          "custom/latex_label": "\nLabel = require \"models/annotations/label\"\n\nclass LatexLabelView extends Label.View\n  render: () ->\n\n    #--- Start of copied section from ``Label.render`` implementation\n\n    ctx = @plot_view.canvas_view.ctx\n\n    # Here because AngleSpec does units tranform and label doesn\'t support specs\n    switch @mget(\'angle_units\')\n      when \"rad\" then angle = -1 * @mget(\'angle\')\n      when \"deg\" then angle = -1 * @mget(\'angle\') * Math.PI/180.0\n\n    if @mget(\'x_units\') == \"data\"\n      vx = @xmapper.map_to_target(@mget(\'x\'))\n    else\n      vx = @mget(\'x\')\n    sx = @canvas.vx_to_sx(vx)\n\n    if @mget(\'y_units\') == \"data\"\n      vy = @ymapper.map_to_target(@mget(\'y\'))\n    else\n      vy = @mget(\'y\')\n    sy = @canvas.vy_to_sy(vy)\n\n    if @model.panel?\n      panel_offset = @_get_panel_offset()\n      sx += panel_offset.x\n      sy += panel_offset.y\n\n    #--- End of copied section from ``Label.render`` implementation\n\n    # ``katex`` is loaded into the global window at runtime\n    # katex.renderToString returns a html ``span`` element\n    latex = katex.renderToString(@mget(\'text\'), {displayMode: true})\n\n    # Must render as superpositioned div (not on canvas) so that KaTex\n    # css can properly style the text\n    @_css_text(ctx, latex, sx + @mget(\'x_offset\'), sy - @mget(\'y_offset\'), angle)\n\nclass LatexLabel extends Label.Model\n  type: \'LatexLabel\'\n  default_view: LatexLabelView\n\nmodule.exports =\n  Model: LatexLabel\n  View: LatexLabelView\n",
          "custom/my_formatter": "\nTickFormatter = require \"models/formatters/tick_formatter\"\n\nclass MyFormatter extends TickFormatter.Model\n  type: \"MyFormatter\"\n\n  # TickFormatters should implement this method, which accepts a lisst\n  # of numbers (ticks) and returns a list of strings\n  doFormat: (ticks) ->\n    # format the first tick as-is\n    formatted = [\"#{ticks[0]}\"]\n\n    # format the remaining ticks as a difference from the first\n    for i in [1...ticks.length]\n       formatted.push(\"+#{(ticks[i]-ticks[0]).toPrecision(2)}\")\n\n    return formatted\n\nmodule.exports =\n  Model: MyFormatter\n",
          "custom/surface3d": "\n# This file contains the JavaScript (CoffeeScript) implementation\n# for a Bokeh custom extension. The \"surface3d.py\" contains the\n# python counterpart.\n#\n# This custom model wraps one part of the third-party vis.js library:\n#\n#     http://visjs.org/index.html\n#\n# Making it easy to hook up python data analytics tools (NumPy, SciPy,\n# Pandas, etc.) to web presentations using the Bokeh server.\n\n# These \"require\" lines are similar to python \"import\" statements\n_ = require \"underscore\"\n$ = require \"jquery\"\n\np = require \"core/properties\"\nLayoutDOM = require \"models/layouts/layout_dom\"\n\n# This defines some default options for the Graph3d feature of vis.js\n# See: http://visjs.org/graph3d_examples.html for more details.\nOPTIONS =\n  width:  \'600px\'\n  height: \'600px\'\n  style: \'surface\'\n  showPerspective: true\n  showGrid: true\n  keepAspectRatio: true\n  verticalRatio: 1.0\n  legendLabel: \'stuff\'\n  cameraPosition:\n    horizontal: -0.35\n    vertical: 0.22\n    distance: 1.8\n\n# To create custom model extensions that will render on to the HTML canvas\n# or into the DOM, we must create a View subclass for the model. Currently\n# Bokeh models and views are based on BackBone. More information about\n# using Backbone can be found here:\n#\n#     http://backbonejs.org/\n#\n# In this case we will subclass from the existing BokehJS ``LayoutDOM.View``,\n# corresponding to our\nclass Surface3dView extends LayoutDOM.View\n\n  initialize: (options) ->\n    super(options)\n\n    url = \"https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.min.js\"\n    $.getScript(url).done(@_init)\n\n  # NOTE: we have to use the \"fat arrow\" => here so that \"this\" is bound correctly\n  _init: () =>\n    # Create a new Graph3s using the vis.js API. This assumes the vis.js has\n    # already been loaded (e.g. in a custom app template). In the future Bokeh\n    # models will be able to specify and load external scripts automatically.\n    #\n    # Backbone Views create <div> elements by default, accessible as @$el. Many\n    # Bokeh views ignore this default <div>, and instead do things like draw\n    # to the HTML canvas. In this case though, we use the <div> to attach a\n    # Graph3d to the DOM.\n    @_graph = new vis.Graph3d(@$el[0], @get_data(), OPTIONS)\n\n    # Set Backbone listener so that when the Bokeh data source has a change\n    # event, we can process the new data\n    @listenTo(@model.data_source, \'change\', () =>\n        @_graph.setData(@get_data())\n    )\n\n  # This is the callback executed when the Bokeh data has an change. Its basic\n  # function is to adapt the Bokeh data source to the vis.js DataSet format.\n  get_data: () ->\n    data = new vis.DataSet()\n    source = @model.data_source\n    for i in [0...source.get_length()]\n      data.add({\n        x:     source.get_column(@model.x)[i]\n        y:     source.get_column(@model.y)[i]\n        z:     source.get_column(@model.z)[i]\n        style: source.get_column(@model.color)[i]\n      })\n    return data\n\n# We must also create a corresponding JavaScript Backbone model sublcass to\n# correspond to the python Bokeh model subclass. In this case, since we want\n# an element that can position itself in the DOM according to a Bokeh layout,\n# we subclass from ``LayoutDOM.model``\nclass Surface3d extends LayoutDOM.Model\n\n  # This is usually boilerplate. In some cases there may not be a view.\n  default_view: Surface3dView\n\n  # The ``type`` class attribute should generally match exactly the name\n  # of the corresponding Python class.\n  type: \"Surface3d\"\n\n  # The @define block adds corresponding \"properties\" to the JS model. These\n  # should basically line up 1-1 with the Python model class. Most property\n  # types have counterparts, e.g. ``bokeh.core.properties.String`` will be\n  # ``p.String`` in the JS implementatin. Where the JS type system is not yet\n  # as rich, you can use ``p.Any`` as a \"wildcard\" property type.\n  @define {\n    x:           [ p.String           ]\n    y:           [ p.String           ]\n    z:           [ p.String           ]\n    color:       [ p.String           ]\n    data_source: [ p.Instance         ]\n  }\n\n# This is boilerplate. Every implementation should \"export\" a ``Model``\n# and (when applicable) also a ``View``.\nmodule.exports =\n  Model: Surface3d\n  View: Surface3dView\n"
          }, {}, ["custom/main"]);
        },
        
        function(Bokeh) {
          Bokeh.$(function() {
              Bokeh.safely(function() {
                  var docs_json = {"9f2ab0eb-2146-45dc-b0c5-2586fafa35bf":{"roots":{"references":[{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"#1f77b4"},"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"size":{"units":"screen","value":8},"x":{"field":"x"},"y":{"field":"y"}},"id":"00c6e284-ca46-4b7f-aa40-ce9c85d382a8","type":"Circle"},{"attributes":{},"id":"93dba926-c6b0-4654-b7a4-586b84d449b8","type":"BasicTickFormatter"},{"attributes":{"below":[{"id":"89ce5290-5f45-4527-81c3-a8fed0012e6e","type":"LinearAxis"}],"left":[{"id":"010c2f8d-bbd5-454f-9579-0347ed9b85b2","type":"LinearAxis"}],"plot_height":400,"plot_width":400,"renderers":[{"id":"89ce5290-5f45-4527-81c3-a8fed0012e6e","type":"LinearAxis"},{"id":"58bc1f85-beac-420c-86f0-b04bce987c44","type":"Grid"},{"id":"010c2f8d-bbd5-454f-9579-0347ed9b85b2","type":"LinearAxis"},{"id":"6a50e320-620f-477f-b72a-27d203087b4f","type":"Grid"},{"id":"41a87a5b-ec52-45eb-a63e-05664c67a756","type":"PolyAnnotation"},{"id":"b759216a-2dd4-4855-83b4-716acf366c88","type":"GlyphRenderer"},{"id":"e5df1f42-6687-4fbd-b3f2-663de5004223","type":"GlyphRenderer"}],"title":{"id":"7e17c62f-932d-4b06-84e4-e07c1295205c","type":"Title"},"tool_events":{"id":"de337a7b-d732-4e92-9a50-c488bc52e2e5","type":"ToolEvents"},"toolbar":{"id":"ff4d4b31-05bb-440a-98bf-535693a93ea2","type":"Toolbar"},"x_range":{"id":"72ed1b27-0538-4993-9f13-f9917049b30e","type":"DataRange1d"},"y_range":{"id":"cff471c1-726f-4c2e-bcae-48b234d9cc73","type":"DataRange1d"}},"id":"082f7af7-53d2-443b-bc53-e3319e930af3","subtype":"Figure","type":"Plot"},{"attributes":{"callback":null},"id":"cff471c1-726f-4c2e-bcae-48b234d9cc73","type":"DataRange1d"},{"attributes":{"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"line_width":{"value":5},"x":{"field":"x"},"y":{"field":"ym"}},"id":"a3e36b60-0f0f-4054-a97d-7a3d8b68da80","type":"Line"},{"attributes":{"callback":null,"overlay":{"id":"41a87a5b-ec52-45eb-a63e-05664c67a756","type":"PolyAnnotation"},"plot":{"id":"082f7af7-53d2-443b-bc53-e3319e930af3","subtype":"Figure","type":"Plot"}},"id":"10574db4-87a4-4c3d-b84a-e80a3ba7b19d","type":"LassoSelectTool"},{"attributes":{"dimension":1,"plot":{"id":"082f7af7-53d2-443b-bc53-e3319e930af3","subtype":"Figure","type":"Plot"},"ticker":{"id":"5efff36c-b26e-45e7-af4b-239b196b5533","type":"BasicTicker"}},"id":"6a50e320-620f-477f-b72a-27d203087b4f","type":"Grid"},{"attributes":{"data_source":{"id":"fdb3bb41-ac1f-4e9f-aab7-06741d4fb48b","type":"ColumnDataSource"},"glyph":{"id":"7d16f824-cc37-4de8-aa49-8deb172c5f4f","type":"Line"},"hover_glyph":null,"nonselection_glyph":{"id":"a3e36b60-0f0f-4054-a97d-7a3d8b68da80","type":"Line"},"selection_glyph":null},"id":"e5df1f42-6687-4fbd-b3f2-663de5004223","type":"GlyphRenderer"},{"attributes":{"formatter":{"id":"93dba926-c6b0-4654-b7a4-586b84d449b8","type":"BasicTickFormatter"},"plot":{"id":"082f7af7-53d2-443b-bc53-e3319e930af3","subtype":"Figure","type":"Plot"},"ticker":{"id":"5efff36c-b26e-45e7-af4b-239b196b5533","type":"BasicTicker"}},"id":"010c2f8d-bbd5-454f-9579-0347ed9b85b2","type":"LinearAxis"},{"attributes":{},"id":"74756848-52ba-4d5d-877a-005adcf84195","type":"BasicTickFormatter"},{"attributes":{},"id":"5efff36c-b26e-45e7-af4b-239b196b5533","type":"BasicTicker"},{"attributes":{"callback":null},"id":"72ed1b27-0538-4993-9f13-f9917049b30e","type":"DataRange1d"},{"attributes":{"line_alpha":{"value":0.6},"line_color":{"value":"orange"},"line_width":{"value":5},"x":{"field":"x"},"y":{"field":"ym"}},"id":"7d16f824-cc37-4de8-aa49-8deb172c5f4f","type":"Line"},{"attributes":{"plot":{"id":"082f7af7-53d2-443b-bc53-e3319e930af3","subtype":"Figure","type":"Plot"},"ticker":{"id":"6ccd25d1-80bd-483c-a861-26338b83d70c","type":"BasicTicker"}},"id":"58bc1f85-beac-420c-86f0-b04bce987c44","type":"Grid"},{"attributes":{"args":{"s2":{"id":"fdb3bb41-ac1f-4e9f-aab7-06741d4fb48b","type":"ColumnDataSource"}},"code":"\n        var inds = cb_obj.get('selected')['1d'].indices;\n        var d = cb_obj.get('data');\n        var ym = 0\n\n        if (inds.length == 0) { return; }\n\n        for (i = 0; i < d['color'].length; i++) {\n            d['color'][i] = \"navy\"\n        }\n        for (i = 0; i < inds.length; i++) {\n            d['color'][inds[i]] = \"firebrick\"\n            ym += d['y'][inds[i]]\n        }\n\n        ym /= inds.length\n        s2.get('data')['ym'] = [ym, ym]\n\n        cb_obj.trigger('change');\n        s2.trigger('change');\n    "},"id":"16d02853-0b3d-405d-84e8-c7beca21bebf","type":"CustomJS"},{"attributes":{"data_source":{"id":"c67e85b7-7b4d-4894-ab0e-6b9a18fb0df4","type":"ColumnDataSource"},"glyph":{"id":"eb330174-9319-437f-984a-807d653d8f34","type":"Circle"},"hover_glyph":null,"nonselection_glyph":{"id":"00c6e284-ca46-4b7f-aa40-ce9c85d382a8","type":"Circle"},"selection_glyph":null},"id":"b759216a-2dd4-4855-83b4-716acf366c88","type":"GlyphRenderer"},{"attributes":{},"id":"6ccd25d1-80bd-483c-a861-26338b83d70c","type":"BasicTicker"},{"attributes":{"formatter":{"id":"74756848-52ba-4d5d-877a-005adcf84195","type":"BasicTickFormatter"},"plot":{"id":"082f7af7-53d2-443b-bc53-e3319e930af3","subtype":"Figure","type":"Plot"},"ticker":{"id":"6ccd25d1-80bd-483c-a861-26338b83d70c","type":"BasicTicker"}},"id":"89ce5290-5f45-4527-81c3-a8fed0012e6e","type":"LinearAxis"},{"attributes":{"callback":null,"column_names":["ym","x"],"data":{"x":[0,1],"ym":[0.5,0.5]}},"id":"fdb3bb41-ac1f-4e9f-aab7-06741d4fb48b","type":"ColumnDataSource"},{"attributes":{"plot":null,"text":"Select Here"},"id":"7e17c62f-932d-4b06-84e4-e07c1295205c","type":"Title"},{"attributes":{"fill_alpha":{"value":0.5},"fill_color":{"value":"lightgrey"},"level":"overlay","line_alpha":{"value":1.0},"line_color":{"value":"black"},"line_dash":[4,4],"line_width":{"value":2},"plot":null,"xs_units":"screen","ys_units":"screen"},"id":"41a87a5b-ec52-45eb-a63e-05664c67a756","type":"PolyAnnotation"},{"attributes":{"active_drag":"auto","active_scroll":"auto","active_tap":"auto","tools":[{"id":"10574db4-87a4-4c3d-b84a-e80a3ba7b19d","type":"LassoSelectTool"}]},"id":"ff4d4b31-05bb-440a-98bf-535693a93ea2","type":"Toolbar"},{"attributes":{"fill_alpha":{"value":0.4},"fill_color":{"field":"color"},"line_alpha":{"value":0.4},"line_color":{"field":"color"},"size":{"units":"screen","value":8},"x":{"field":"x"},"y":{"field":"y"}},"id":"eb330174-9319-437f-984a-807d653d8f34","type":"Circle"},{"attributes":{},"id":"de337a7b-d732-4e92-9a50-c488bc52e2e5","type":"ToolEvents"},{"attributes":{"callback":{"id":"16d02853-0b3d-405d-84e8-c7beca21bebf","type":"CustomJS"},"column_names":["color","y","x"],"data":{"color":["navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy"],"x":[0.4641976277177189,0.08461698864497347,0.5466217786787068,0.21914248868564623,0.794775108057261,0.3373127279654431,0.6764231476106267,0.4688426242705075,0.17330756861336194,0.42612161251981595,0.878231590114843,0.3580077902087747,0.274469332918834,0.3401952364043793,0.6254701377773906,0.5229378908134791,0.4849056412952263,0.19731543253907524,0.5399935007314436,0.6608786298121505,0.7234056245160774,0.23134468838708067,0.2636210300202254,0.8921548319288173,0.5050296535850921,0.8795623734193413,0.2624745453451297,0.6051447255742176,0.46949586567258206,0.3330277849421994,0.020619965037745547,0.007529505617598464,0.422860769494258,0.3861712684691214,0.0596189131916236,0.2224532263432213,0.2839395979561503,0.2867725610191516,0.08003580532912236,0.924309405958661,0.6928858664795143,0.7693211829282419,0.9923522341825691,0.14241643109688984,0.7745854472248258,0.03727524606604804,0.6421416943834726,0.8730087826079038,0.4425375151354696,0.07982296732509653,0.000644957727476303,0.8379806269698968,0.18015269532314926,0.8177282037420347,0.8839908033210581,0.4806783760515677,0.17472357090408785,0.1276961313416618,0.16007663950979412,0.31439839685649906,0.5670577827828334,0.44932491271685315,0.10151387094571118,0.6009769308974315,0.2997369204434821,0.013852116260057667,0.11791086395051609,0.10922999876449391,0.4461892865436746,0.8717170366554752,0.2799728742011597,0.467281979838829,0.12452907924279322,0.9573798178561537,0.2969651519565155,0.2589088671979596,0.8812454367705328,0.9585207897731943,0.06358962198258067,0.32986444340784415,0.10811716566895224,0.04800163532399504,0.10030992086825286,0.6026493508053977,0.8608387567925292,0.9414272807045113,0.5234241290022346,0.8983030403601083,0.6009436888070682,0.07589564248905023,0.3743001069247074,0.04758609507626821,0.38402975247153426,0.2599817517312647,0.2602894697653019,0.471857569205439,0.38885250482920186,0.9243269256014109,0.7653912431123543,0.7476472521131775,0.1742990356939388,0.11406113557990782,0.5439715458304182,0.11839948793113997,0.9381547140750441,0.817478792383784,0.34003539829557394,0.23069792158778135,0.013234026331413462,0.19829267944629125,0.14911918454708417,0.7530538694112723,0.18989809309100059,0.4769097528696732,0.4970950677394075,0.9657231574642141,0.011426314918652314,0.6258894602831595,0.40387349860736665,0.3012715391165215,0.45771065705975345,0.4473426360306827,0.14336305993960963,0.9993736528091918,0.08559507922587128,0.500589897483437,0.645262499166826,0.7945632722504552,0.6456827012125066,0.5208236028080883,0.18251409560388576,0.4804828253697063,0.27626517240348225,0.8415012965389005,0.806355414710303,0.4199024084465107,0.8860495217113757,0.5599009889795997,0.19748977692904346,0.9184496230354465,0.5815184988837092,0.6951259753027942,0.7353435138047487,0.9333645952032162,0.6267207153081877,0.9941124310889538,0.9361284133990633,0.05527156732269056,0.14713178333894317,0.332429779732095,0.21048878530994575,0.7748504705784431,0.2864688794954443,0.007973287078567592,0.12613030278691384,0.9269904781110605,0.3116879708444148,0.7343683784835678,0.5567424148581228,0.9788758436575544,0.5756269011056186,0.889758586398662,0.3161627404957408,0.39147013432344235,0.9375385780170273,0.2229878017851329,0.13388227287619903,0.14261589478552383,0.2421533695432827,0.07350144614021203,0.4580844126540613,0.2593765217801177,0.00282323641138027,0.6765480438454391,0.309239492010409,0.22076399476035224,0.5059473602985028,0.9146758681359449,0.2065998032868187,0.053713396717757655,0.42315756601312304,0.7650093366973489,0.4965108099298283,0.5841300731044904,0.5050572202085751,0.9273085304866547,0.09273880608561835,0.989000501332547,0.36965308287157606,0.45948663595647465,0.13541664085000815,0.6645260095597085,0.610234250155191,0.9343938331611302,0.6611332793933672,0.13575011392745429,0.49832748291894247,0.9566711329291153,0.25287088531538615,0.054734138570832314,0.5230267001154424,0.07768577312387359,0.47560408438406376,0.6866385847389893,0.6350647962000756,0.5620077113621331,0.5979952166430476,0.38554625190494973,0.5661069904680808,0.9460886795954034,0.5671705518191654,0.5945619969788924,0.13800325512641032,0.8349975405651836,0.8649158877115041,0.6074011753319576,0.650807356327139,0.5634859611628104,0.09472140019519482,0.8440899773722109,0.19614868155984067,0.5046011065010209,0.9659402893400807,0.5609722733309933,0.27372001437615523,0.5458441164318416,0.48894912928795053,0.09635845470406867,0.036065763646741855,0.7802709787014901,0.27014478025322164,0.5931260554949865,0.09598345637178696,0.6184598568351598,0.04097450707120165,0.5540530250159376,0.1876947366728695,0.29249753000740963,0.01668487671072627,0.8021647964520238,0.2776240519115447,0.631679877068305,0.9455062658582514,0.731395541570941,0.8043156605404799,0.4533507170593889,0.20457764364337083,0.6110123054151475,0.8489553356144816,0.5688097156535266,0.5975883410462699,0.45791078724931356,0.17131358894918403,0.631978055038326,0.7309871421647666,0.0873551419689802,0.7639828889302607,0.9650330218503184,0.5608159990748506,0.704433252849268,0.3718342969533107,0.10626545595748893,0.08751662633658008,0.23395961738797688,0.6538403636298853,0.039943006790780555,0.5526167589269194,0.6802255830639836,0.13968814114353112,0.7122086735523815,0.810001394800857,0.8827983861019766,0.22898406662978676,0.8295521555263728,0.33095475426588794,0.8407433016853217,0.5585739744412803,0.7595761443383611,0.6125710916685226,0.7883041440603132,0.5589324039856675,0.8456213097868106,0.6947901038905904,0.43348182400247437,0.9043662276555728,0.4521398079558193,0.19715037352437803,0.5212422374805572,0.38984755374619184,0.44189714557830995,0.581634643144032,0.5271691382932586,0.34390042157185996,0.028665315138447722,0.7336223623843872,0.4218577757612688,0.6679975338745707,0.6030367381183246,0.08463289011297037,0.26343551519868136,0.5205594315936721,0.5604871083269539,0.1733586729114871,0.42545170626886375,0.9932591831691737,0.7213672097940441,0.7895914282618448,0.8982329899082323,0.7319111871153191,0.5003982461413563,0.7877569023987309,0.43448973690091,0.7763448627752524,0.801191276437422,0.014559968371919196,0.2307325362405347,0.34686099098676226,0.4123339260279004,0.9146012946479047,0.3878369893250746,0.34771585549318196,0.9880439809678312,0.8233670043363327,0.8568315802136647,0.40877229601548626,0.34186050749192576,0.7638711460833867,0.386846127095852,0.1556383162016235,0.577147304546825,0.7161250739136923,0.2979836411226594,0.03881584103528524,0.34428316199576325,0.93144203597489,0.004319295918029931,0.2799552092420847,0.6939146295507698,0.9605797350139418,0.04091210967417869,0.848721686855198,0.22070780901878972,0.7235158606129785,0.2032372620152776,0.9447944761831129,0.6203278682538417,0.3608424150279106,0.9610711223685776,0.2627153877863321,0.9772561861414544,0.5543302873825563,0.3441982461122901,0.05108752902781699,0.08510544086847438,0.4857194198371446,0.003123803923603674,0.4645334074076597,0.06024527195132101,0.17013691075450166,0.053534366531790445,0.6471274688253491,0.726311550490185,0.33831985571779744,0.5343125160845691,0.014780928003338079,0.531819099165479,0.39884815615865676,0.44795481197337284,0.9057245178005227,0.8517337152444564,0.37154123998365707,0.8569933814725218,0.0944338036022434,0.1975561891066432,0.6612804381829416,0.8715000056701792,0.45811580537149554,0.5367926358699318,0.5226500796048621,0.9130093325084196,0.5526161471634558,0.9169331641890721,0.2881947965328344,0.38880215610263436,0.5131009041214522,0.9628640438082656,0.888582681117461,0.41677502046156634,0.1224817286701414,0.2875666184014326,0.7895149726532041,0.5654795584488361,0.24561759589113108,0.6571299082534628,0.49292003291893294,0.3720657860948189,0.43838910436376266,0.9349735889140883,0.4029475599102864,0.15326279178620517,0.4708277496726244,0.7207563938712711,0.6920833611948194,0.7220090669466251,0.8436505535955019,0.2468285306329383,0.8889338851881113,0.9785785064305474,0.48739934929040896,0.7821598650187495,0.5113152758807783,0.05255141031245991,0.4968407538315702,0.051253545771424935,0.19894553526038206,0.0044645607489082195,0.8128297064124221,0.1746399665306968,0.5610228803764041,0.7971376447867481,0.6944721195089211,0.01824278780674271,0.1667835871523653,0.17526842119496655,0.5233142047174373,0.4306330625482496,0.08769020596442778,0.4428573728910403,0.8355517842127865,0.7442264002506462,0.6051654246246844,0.5706920990382359,0.44800922803245113,0.3157146187323141,0.47963501736071257,0.5970582310070761,0.07136469353464203,0.19212601742900026,0.14045575724269366,0.997591797108253,0.42440577323141393,0.704627337165135,0.7405322162281307,0.3315464520989001,0.6267253035084855,0.5394184418915885,0.33381010595688554,0.9734069360201666,0.5444835300898779,0.7787570817924563,0.7987682288316106,0.7886325032096011,0.3311076407075867,0.16005502501875768,0.9488480246792595,0.7538060453027651,0.47604723053418296,0.9975320089737038,0.4648172194902389,0.6809984088981653,0.5562182222149048,0.7713548810336458,0.9284661822348664,0.4420654103842515,0.9635087586036986,0.4241155152701094,0.607478587406727,0.2728648490717501,0.8011939822485667,0.8525715542882552,0.7575433177445847,0.2566013610475034,0.3008549359328061,0.4002451073392602,0.9659389449578956,0.4550244433823757,0.406213600306668,0.23961640267178452,0.6693962135490915,0.36027889305331096,0.7034714208492964,0.6895025671824593,0.5895206045366435,0.0887857238283456,0.050838264965994084,0.9851295998206372,0.24474297215560703,0.26532833836225844,0.0477338334337275,0.8375765616927943,0.2538538468217155,0.02270246849586366,0.5311550378218927,0.6403138729241378,0.2116449850445471,0.2693542222686306,0.40998458980396,0.9551461907897365,0.4765498153860981,0.9017618917281166],"y":[0.4784656374753521,0.5054889941397605,0.5125549280986884,0.5858065599799929,0.5911185492420243,0.4365656133641438,0.505549386957244,0.5301899861731392,0.3795187061435997,0.37295887404255046,0.2106669166289964,0.4763283362094354,0.80518236352027,0.7420319345091785,0.966372333018693,0.4161099859101146,0.9282208604017758,0.0254811156806517,0.2995127251532895,0.42688388383013476,0.19930980684952182,0.12665161000004888,0.6033145681616988,0.37287634151158333,0.6365724314694854,0.5037390942580027,0.2801915730844512,0.874605052223202,0.633987507848786,0.5544849148929095,0.6498481360838121,0.00950920726468163,0.9236610696198935,0.805200985800568,0.12068446506225561,0.9215450510338072,0.7867185012026503,0.38005156915597527,0.07619467241458522,0.19361242445589877,0.6614254200830293,0.8722505197798021,0.2923767479123759,0.8159562918633997,0.710512781478093,0.6172362499409018,0.8501273044651619,0.7985544248928601,0.3717282171944899,0.1774569748527829,0.11552916776146682,0.49339408428116815,0.7484581894879383,0.8118907409178083,0.09233077496445097,0.14796548578218627,0.340164240484937,0.2057216600908831,0.6110770200317326,0.044326594122402585,0.9792710570720204,0.9114384871608644,0.9505083569664559,0.9980900585500024,0.6602830984648194,0.55738682579383,0.07188601680676776,0.40260656637090175,0.5803876294626658,0.9365963850159704,0.7286876293703419,0.6694595639257128,0.8258675791163608,0.7767513233095469,0.7446311237104449,0.44615832917749354,0.26190114682672505,0.43956273809997415,0.1484255351756103,0.7994062303169107,0.9787340927645861,0.8428711339315964,0.23307920513477154,0.6291786737485424,0.6772749304803213,0.1795136243907378,0.9240345014715022,0.03542015093787376,0.8802624473703409,0.3514166681046339,0.48397023976698283,0.321203999974074,0.20595241487091165,0.6420797380308018,0.11855417981610394,0.2154070241450292,0.7943096908803979,0.6353922394346995,0.370360428168675,0.37310211301133256,0.5175791251412227,0.9554081353889194,0.540929085901948,0.6933230835346689,0.32198956658717126,0.3376085979221286,0.9469351270629781,0.8205553016541101,0.5633463539600431,0.8090746590393056,0.254966691464256,0.9566292290715233,0.03751588114712623,0.6295761416825938,0.29076031979712325,0.05527298036100747,0.9435926438772148,0.7786463954459575,0.05825952396615186,0.8540840193183853,0.41632805281268936,0.6061418626948473,0.131834660849674,0.6379360054310393,0.3764705394306801,0.33941654800550847,0.5530381510874275,0.06153377585806741,0.019348655346317356,0.02138650404174458,0.2704275711840163,0.3587871228391021,0.9264990005884021,0.5191009296909302,0.3323356384331355,0.5954196776860977,0.458562636511592,0.9834365282740363,0.6291465153131425,0.1593068917483682,0.8768973648353886,0.6349018055674591,0.8221244414894319,0.15595231482835037,0.43215059370068054,0.26877482725889035,0.28581678313761616,0.7913977806555691,0.08572205232781516,0.8581886723710564,0.17771260254162347,0.9299560311420834,0.9633997393503629,0.07802308443573847,0.2187057592269961,0.4688667411511015,0.2784528337346238,0.5238002202623849,0.5437556967495232,0.5566831267507659,0.19226106964511058,0.1502506264238922,0.7226935650167412,0.37033139455128006,0.0506197709895716,0.40895499498025256,0.3596323950394775,0.8468241610697905,0.5034525114851963,0.8358507144588068,0.8254010654161513,0.47839957993418847,0.5280456726962214,0.40172238459824483,0.5355377640241205,0.28834145829250524,0.6429234455629139,0.47122047861831284,0.5256029143322841,0.7413245977656838,0.2331345729840396,0.03132147056067158,0.15229903533092404,0.01665894920505917,0.18668498850262993,0.37544105786559634,0.9997759021682218,0.5212650875450118,0.05781293894331485,0.8381495626432446,0.3054573683189763,0.12979066396012306,0.7808969138691868,0.16361019740657856,0.8184608742200904,0.623406642494893,0.763851675257748,0.5733361364279126,0.511653282090528,0.19783530092224277,0.9467883990409721,0.34087637401799786,0.8964829447935402,0.8462189210581574,0.04529016695036048,0.5118589792604588,0.7429864181700356,0.44069567769250484,0.9780834523851181,0.6476140061079483,0.4946083605156577,0.6926655021056657,0.5569513652581748,0.9637277590689847,0.35692178306994027,0.7485444689397068,0.23136554980732704,0.3954822700662859,0.42588370597179115,0.7879860237090937,0.536158480352962,0.631040442951387,0.2570196314697918,0.656022210081489,0.4778256376947605,0.8169351841225545,0.28132945071236326,0.44968162944692713,0.7629390116251916,0.4341632161853439,0.002632280515448282,0.7177553252275091,0.2419940652849053,0.5518726170609757,0.8938381868826326,0.1860981870919154,0.9908510057274591,0.2291793501906364,0.7900575198577704,0.19995732789234877,0.0052254892297483035,0.8382599028955676,0.4345965228724512,0.34919220823343367,0.4052720451024754,0.5777161341298307,0.28094749791736695,0.39112170858705064,0.8835217657562505,0.4264379767977381,0.31935131689584795,0.30155660552355923,0.08569381804928244,0.15450982926645107,0.8877584838978319,0.11375272557476901,0.20126706457739052,0.7818248641977344,0.6282371338968559,0.7640650075801921,0.3246480595645769,0.3239141492990547,0.413499962481753,0.30239275182379366,0.7949732798373935,0.8627980891205054,0.9468156057031362,0.46776922409508337,0.48424732909866364,0.5634207359076722,0.36945216139280257,0.9839200645552184,0.1095051967945666,0.18193045044995693,0.4889070392916185,0.6399492180762109,0.92395412802018,0.5324387963686622,0.16049755357767514,0.7759485666398285,0.9451178783220078,0.06099403739552978,0.2290258986400775,0.5238986607642716,0.10414364454015124,0.256831489433505,0.08190373061046574,0.013535037678621076,0.09723819730743899,0.27805214882486273,0.1840194790651145,0.7012206801842489,0.8151063869712001,0.7806194603322486,0.16720069520035408,0.13848865894127416,0.10342606000178955,0.8411804729927437,0.4149733005485352,0.28310056460203636,0.8461899795460484,0.5757104427149751,0.036319431131404456,0.8740437933124717,0.9595511800398486,0.8109974939769485,0.14892038225540138,0.911140958824027,0.19709932671519004,0.9681224594872733,0.8567443463003082,0.8706645807287138,0.7832722391234931,0.8433031729747371,0.03564464554598579,0.7822867257770171,0.28584876205418097,0.37400761612749645,0.20284726311290968,0.6107518217670749,0.5699360970729076,0.16344563477648621,0.04912939575615438,0.8970551989807267,0.016134355523265365,0.1553184672909066,0.2755073029363455,0.3235750955454815,0.19658620772450752,0.7804657007119935,0.8674937626216547,0.8961221501430329,0.32938984163401563,0.23480522460408193,0.8603231826297992,0.9943960092748155,0.2869757839479514,0.6386719419791556,0.33762713807875266,0.9068646654930137,0.8761612759121624,0.7906350675170558,0.2587475880553627,0.4540800724582842,0.5401900970324183,0.7322052490394445,0.9427784955265321,0.44990294214749105,0.19137460620118185,0.9571799244226779,0.96780601515908,0.6091356474554268,0.4401270242162121,0.2789362496373837,0.20586711148568215,0.60518915949581,0.6551777396280111,0.12987798460615496,0.11030481241442058,0.6465211549676215,0.5289391025807675,0.5547802882093862,0.020823247247372834,0.20185887281433323,0.5909016056216908,0.29856090943674307,0.06420358140417382,0.3042299100285659,0.0927727316857635,0.5629956489750427,0.42613164138234016,0.15619271429943737,0.03756477182243667,0.3265939546243637,0.6662356668646404,0.6368460270117553,0.5789810435056854,0.5435724212834075,0.8257556188257241,0.640728277613701,0.011333575032501875,0.9805155495474054,0.7824855281043187,0.2342084359885841,0.47045102224492974,0.5831391861989298,0.1826114538957494,0.9846631280004446,0.2422061976926232,0.5731272634567266,0.6915236599671283,0.2673610154662255,0.49964681225987406,0.5123691667347018,0.5856814450970006,0.9397530647988313,0.468250858087671,0.5604245032261171,0.779464151109259,0.07532658945709703,0.433829926072158,0.0994822858761707,0.5856095646585815,0.6227592491229842,0.7476347572807176,0.3595960260375022,0.18407323384209595,0.38390826996759486,0.7564368225127388,0.30355212404428034,0.010803238121423142,0.5661116848224391,0.765779182108782,0.5905380620330396,0.7674568983755178,0.1857562877996758,0.30775783102341303,0.2975280803332617,0.7129047526094372,0.6560207934635072,0.09675492391555185,0.27259638906276595,0.31747084411628945,0.6255004414556317,0.3434875034432946,0.4488416979504618,0.8081127451068906,0.37228963210085975,0.07369003423059384,0.4621873646564223,0.1785209773180907,0.42303114745194315,0.8118458660272905,0.8764817398307131,0.2677317591709911,0.5219591022332436,0.380597639648629,0.09403146381917926,0.1580989310062123,0.5365254592279531,0.23777562066209423,0.9853524121886047,0.6933879116071758,0.8868346360216607,0.6233621539039231,0.5342303985757256,0.8838152074275066,0.15796312308699456,0.1325178982398062,0.26136884995481613,0.5969559310817374,0.6143497889967884,0.4067073420184285,0.9232582029788793,0.9211011856785782,0.20768266435267235,0.22868254652060105,0.01215214241413054,0.9239555296783449,0.670180600377403,0.4649848475944305,0.00991907010142834,0.6484277107307826,0.8642971826498461,0.9085290410341946,0.10930801541127888,0.880871846565873,0.9487704906444181,0.4472421601666694,0.4370302023610926,0.6899631177218515,0.7334374534829818,0.6292673842956384,0.7057531718142268,0.5831212178279462,0.11845796394749286,0.5036806416454207,0.837356062478716,0.4518049612784525,0.15702664713719727,0.28741659762193006,0.8416007265275256,0.6093031973631571,0.41816632774581675,0.5540925449357096,0.3098035538338667,0.2984356267465007,0.1236816724069586,0.9453920946353994,0.7257192956554885,0.26720525613192814,0.4895379840492735,0.03960765186580639,0.09451895439579827,0.36971396575658355,0.6594958658227974,0.06949574384495794,0.24872237639323158,0.746323564778902,0.6465681428041546]}},"id":"c67e85b7-7b4d-4894-ab0e-6b9a18fb0df4","type":"ColumnDataSource"}],"root_ids":["082f7af7-53d2-443b-bc53-e3319e930af3"]},"title":"Bokeh Application","version":"0.12.2.9747"}};
                  var render_items = [{"docid":"9f2ab0eb-2146-45dc-b0c5-2586fafa35bf","elementid":"99b6d9e4-743e-4667-8a9d-20c58b56073f","modelid":"082f7af7-53d2-443b-bc53-e3319e930af3"}];
                  
                  Bokeh.embed.embed_items(docs_json, render_items);
              });
          });
        },
        function(Bokeh) {
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-0.12.2.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-0.12.2.min.css");
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.2.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.2.min.css");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css");
        }
      ];
    
      function run_inline_js() {
        
        for (var i = 0; i < inline_js.length; i++) {
          inline_js[i](window.Bokeh);
        }
        
      }
    
      if (window._bokeh_is_loading === 0) {
        console.log("Bokeh: BokehJS loaded, going straight to plotting");
        run_inline_js();
      } else {
        load_libs(js_urls, function() {
          console.log("Bokeh: BokehJS plotting callback run at", now());
          run_inline_js();
        });
      }
    }(this));
});