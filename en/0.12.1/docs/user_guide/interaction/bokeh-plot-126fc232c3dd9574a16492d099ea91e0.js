document.addEventListener("DOMContentLoaded", function(event) {
    
    (function(global) {
      function now() {
        return new Date();
      }
    
      var force = "";
    
      if (typeof (window._bokeh_onload_callbacks) === "undefined" || force !== "") {
        window._bokeh_onload_callbacks = [];
        window._bokeh_is_loading = undefined;
      }
    
      function run_callbacks() {
        window._bokeh_onload_callbacks.forEach(function(callback) { callback() });
        delete window._bokeh_onload_callbacks
        console.info("Bokeh: all callbacks have finished");
      }
    
      function load_libs(js_urls, callback) {
        window._bokeh_onload_callbacks.push(callback);
        if (window._bokeh_is_loading > 0) {
          console.log("Bokeh: BokehJS is being loaded, scheduling callback at", now());
          return null;
        }
        if (js_urls == null || js_urls.length === 0) {
          run_callbacks();
          return null;
        }
        console.log("Bokeh: BokehJS not loaded, scheduling load and callback at", now());
        window._bokeh_is_loading = js_urls.length;
        for (var i = 0; i < js_urls.length; i++) {
          var url = js_urls[i];
          var s = document.createElement('script');
          s.src = url;
          s.async = false;
          s.onreadystatechange = s.onload = function() {
            window._bokeh_is_loading--;
            if (window._bokeh_is_loading === 0) {
              console.log("Bokeh: all BokehJS libraries loaded");
              run_callbacks()
            }
          };
          s.onerror = function() {
            console.warn("failed to load library " + url);
          };
          console.log("Bokeh: injecting script tag for BokehJS library: ", url);
          document.getElementsByTagName("head")[0].appendChild(s);
        }
      };var element = document.getElementById("ef64f879-a0d8-459f-87d7-de70d8a2739c");
      if (element == null) {
        console.log("Bokeh: ERROR: autoload.js configured with elementid 'ef64f879-a0d8-459f-87d7-de70d8a2739c' but no matching script tag was found. ")
        return false;
      }
    
      var js_urls = ['https://cdn.bokeh.org/bokeh/release/bokeh-0.12.1.min.js', 'https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.1.min.js', 'https://cdn.bokeh.org/bokeh/release/bokeh-compiler-0.12.1.min.js'];
    
      var inline_js = [
        function(Bokeh) {
          Bokeh.set_log_level("info");
        },
        
        function(Bokeh) {
          
          (function outer(modules, cache, entry) {
            if (typeof Bokeh !== "undefined") {
              for (var name in modules) {
                var module = modules[name];
          
                if (typeof(module) === "string") {
                  try {
                    coffee = Bokeh.require("coffee-script")
                  } catch (e) {
                    throw new Error("Compiler requested but failed to import. Make sure bokeh-compiler(-min).js was included.")
                  }
          
                  function compile(code) {
                    var body = coffee.compile(code, {bare: true, shiftLine: true});
                    return new Function("require", "module", "exports", body);
                  }
          
                  modules[name] = [compile(module), {}];
                }
              }
          
              for (var name in modules) {
                Bokeh.require.modules[name] = modules[name];
              }
          
              for (var i = 0; i < entry.length; i++) {
                Bokeh.Models.register_locations(Bokeh.require(entry[i]));
              }
            } else {
              throw new Error("Cannot find Bokeh. You have to load it prior to loading plugins.");
            }
          })({
           "custom/main":[function(require,module,exports){
             module.exports = { Custom: require("custom/custom"),
          DrawTool: require("custom/draw_tool"),
          MyFormatter: require("custom/my_formatter"),
          Surface3d: require("custom/surface3d") };
           }, {}],
           "custom/custom": "\n_ = require \"underscore\"\n$ = require \"jquery\"\n\np = require \"core/properties\"\nLayoutDOM = require \"models/layouts/layout_dom\"\n\nclass CustomView extends LayoutDOM.View\n\n  initialize: (options) ->\n    super(options)\n\n    @render()\n\n    # Set Backbone listener so that when the Bokeh slider has a change\n    # event, we can process the new data\n    @listenTo(@model.slider, \'change\', () => @render())\n\n  render: () ->\n    # Backbone Views create <div> elements by default, accessible as @$el.\n    # Many Bokeh views ignore this default <div>, and instead do things\n    # like draw to the HTML canvas. In this case though, we change the\n    # contents of the <div>, based on the current slider value.\n    @$el.html(\"<h1>#{ @model.text }: #{ @model.slider.value }</h1>\")\n    @$(\'h1\').css({ \'color\': \'#686d8e\', \'background-color\': \'#2a3153\' })\n\nclass Custom extends LayoutDOM.Model\n\n  # If there is an associated view, this is boilerplate.\n  default_view: CustomView\n\n  # The ``type`` class attribute should generally match exactly the name\n  # of the corresponding Python class.\n  type: \"Custom\"\n\n  # The @define block adds corresponding \"properties\" to the JS model. These\n  # should basically line up 1-1 with the Python model class. Most property\n  # types have counterparts, e.g. bokeh.core.properties.String will be\n  # p.String in the JS implementation. Where the JS type system is not yet\n  # as rich, you can use p.Any as a \"wildcard\" property type.\n  @define {\n    text:   [ p.String ]\n    slider: [ p.Any    ]\n  }\n\n# This is boilerplate. Every implementation should export a Model\n# and (when applicable) also a View.\nmodule.exports =\n  Model: Custom\n  View: CustomView\n",
          "custom/draw_tool": "\np = require \"core/properties\"\nGestureTool = require \"models/tools/gestures/gesture_tool\"\n\nclass DrawToolView extends GestureTool.View\n\n  # this is executed when the pan/drag event starts\n  _pan_start: (e) ->\n    @model.source.data = {x: [], y: []}\n\n  # this is executed on subsequent mouse/touch moves\n  _pan: (e) ->\n    frame = @plot_model.frame\n    canvas = @plot_view.canvas\n\n    vx = canvas.sx_to_vx(e.bokeh.sx)\n    vy = canvas.sy_to_vy(e.bokeh.sy)\n    if not frame.contains(vx, vy)\n      return null\n\n    x = frame.get(\'x_mappers\').default.map_from_target(vx)\n    y = frame.get(\'y_mappers\').default.map_from_target(vy)\n\n    @model.source.data.x.push(x)\n    @model.source.data.y.push(y)\n    @model.source.trigger(\'change\')\n\n  # this is executed then the pan/drag ends\n  _pan_end: (e) -> return null\n\nclass DrawTool extends GestureTool.Model\n  default_view: DrawToolView\n  type: \"DrawTool\"\n\n  tool_name: \"Drag Span\"\n  icon: \"bk-tool-icon-lasso-select\"\n  event_type: \"pan\"\n  default_order: 12\n\n  @define { source: [ p.Instance ] }\n\nmodule.exports =\n  Model: DrawTool\n  View: DrawToolView\n",
          "custom/my_formatter": "\nTickFormatter = require \"models/formatters/tick_formatter\"\n\nclass MyFormatter extends TickFormatter.Model\n  type: \"MyFormatter\"\n\n  # TickFormatters should implement this method, which accepts a lisst\n  # of numbers (ticks) and returns a list of strings\n  doFormat: (ticks) ->\n    # format the first tick as-is\n    formatted = [\"#{ticks[0]}\"]\n\n    # format the remaining ticks as a difference from the first\n    for i in [1...ticks.length]\n       formatted.push(\"+#{(ticks[i]-ticks[0]).toPrecision(2)}\")\n\n    return formatted\n\nmodule.exports =\n  Model: MyFormatter\n",
          "custom/surface3d": "\n# This file contains the JavaScript (CoffeeScript) implementation\n# for a Bokeh custom extension. The \"surface3d.py\" contains the\n# python counterpart.\n#\n# This custom model wraps one part of the third-party vis.js library:\n#\n#     http://visjs.org/index.html\n#\n# Making it easy to hook up python data analytics tools (NumPy, SciPy,\n# Pandas, etc.) to web presentations using the Bokeh server.\n\n# These \"require\" lines are similar to python \"import\" statements\n_ = require \"underscore\"\n$ = require \"jquery\"\n\np = require \"core/properties\"\nLayoutDOM = require \"models/layouts/layout_dom\"\n\n# This defines some default options for the Graph3d feature of vis.js\n# See: http://visjs.org/graph3d_examples.html for more details.\nOPTIONS =\n  width:  \'600px\'\n  height: \'600px\'\n  style: \'surface\'\n  showPerspective: true\n  showGrid: true\n  keepAspectRatio: true\n  verticalRatio: 1.0\n  legendLabel: \'stuff\'\n  cameraPosition:\n    horizontal: -0.35\n    vertical: 0.22\n    distance: 1.8\n\n# To create custom model extensions that will render on to the HTML canvas\n# or into the DOM, we must create a View subclass for the model. Currently\n# Bokeh models and views are based on BackBone. More information about\n# using Backbone can be found here:\n#\n#     http://backbonejs.org/\n#\n# In this case we will subclass from the existing BokehJS ``LayoutDOM.View``,\n# corresponding to our\nclass Surface3dView extends LayoutDOM.View\n\n  initialize: (options) ->\n    super(options)\n\n    url = \"https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.min.js\"\n    $.getScript(url).done(@_init)\n\n  # NOTE: we have to use the \"fat arrow\" => here so that \"this\" is bound correctly\n  _init: () =>\n    # Create a new Graph3s using the vis.js API. This assumes the vis.js has\n    # already been loaded (e.g. in a custom app template). In the future Bokeh\n    # models will be able to specify and load external scripts automatically.\n    #\n    # Backbone Views create <div> elements by default, accessible as @$el. Many\n    # Bokeh views ignore this default <div>, and instead do things like draw\n    # to the HTML canvas. In this case though, we use the <div> to attach a\n    # Graph3d to the DOM.\n    @_graph = new vis.Graph3d(@$el[0], @get_data(), OPTIONS)\n\n    # Set Backbone listener so that when the Bokeh data source has a change\n    # event, we can process the new data\n    @listenTo(@model.data_source, \'change\', () =>\n        @_graph.setData(@get_data())\n    )\n\n  # This is the callback executed when the Bokeh data has an change. Its basic\n  # function is to adapt the Bokeh data source to the vis.js DataSet format.\n  get_data: () ->\n    data = new vis.DataSet()\n    source = @model.data_source\n    for i in [0...source.get_length()]\n      data.add({\n        x:     source.get_column(@model.x)[i]\n        y:     source.get_column(@model.y)[i]\n        z:     source.get_column(@model.z)[i]\n        style: source.get_column(@model.color)[i]\n      })\n    return data\n\n# We must also create a corresponding JavaScript Backbone model sublcass to\n# correspond to the python Bokeh model subclass. In this case, since we want\n# an element that can position itself in the DOM according to a Bokeh layout,\n# we subclass from ``LayoutDOM.model``\nclass Surface3d extends LayoutDOM.Model\n\n  # This is usually boilerplate. In some cases there may not be a view.\n  default_view: Surface3dView\n\n  # The ``type`` class attribute should generally match exactly the name\n  # of the corresponding Python class.\n  type: \"Surface3d\"\n\n  # The @define block adds corresponding \"properties\" to the JS model. These\n  # should basically line up 1-1 with the Python model class. Most property\n  # types have counterparts, e.g. ``bokeh.core.properties.String`` will be\n  # ``p.String`` in the JS implementatin. Where the JS type system is not yet\n  # as rich, you can use ``p.Any`` as a \"wildcard\" property type.\n  @define {\n    x:           [ p.String           ]\n    y:           [ p.String           ]\n    z:           [ p.String           ]\n    color:       [ p.String           ]\n    data_source: [ p.Instance         ]\n  }\n\n# This is boilerplate. Every implementation should \"export\" a ``Model``\n# and (when applicable) also a ``View``.\nmodule.exports =\n  Model: Surface3d\n  View: Surface3dView\n"
          }, {}, ["custom/main"]);
        },
        
        function(Bokeh) {
          Bokeh.$(function() {
              var docs_json = {"e6a82a98-a366-4790-96f0-db50af684fcf":{"roots":{"references":[{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"#1f77b4"},"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"size":{"units":"screen","value":8},"x":{"field":"x"},"y":{"field":"y"}},"id":"ea4f0107-6182-433d-a4c6-2c6622fd2e1d","type":"Circle"},{"attributes":{"plot":null,"text":"Select Here"},"id":"16d48101-7a75-47b6-a909-62d8a0857d42","type":"Title"},{"attributes":{"fill_alpha":{"value":0.5},"fill_color":{"value":"lightgrey"},"level":"overlay","line_alpha":{"value":1.0},"line_color":{"value":"black"},"line_dash":[4,4],"line_width":{"value":2},"plot":null,"xs_units":"screen","ys_units":"screen"},"id":"18aa021f-213f-4bcb-97ea-00adf6e43baa","type":"PolyAnnotation"},{"attributes":{"active_drag":"auto","active_scroll":"auto","active_tap":"auto","tools":[{"id":"d6546600-71c9-400a-a7cd-8f5c34d4c1aa","type":"LassoSelectTool"}]},"id":"c854999b-b17e-477f-8d08-eb6d8a7864a1","type":"Toolbar"},{"attributes":{"dimension":1,"plot":{"id":"7ed5ce3b-2d4f-4e9e-976b-f66abc111c30","subtype":"Figure","type":"Plot"},"ticker":{"id":"5f0f5559-799a-4c33-9be7-a10348c59438","type":"BasicTicker"}},"id":"893f256c-aa71-40ec-a6a1-eb389c0686c2","type":"Grid"},{"attributes":{"fill_alpha":{"value":0.4},"fill_color":{"field":"color"},"line_alpha":{"value":0.4},"line_color":{"field":"color"},"size":{"units":"screen","value":8},"x":{"field":"x"},"y":{"field":"y"}},"id":"11c732f8-e828-435b-be73-c219d42ff9a2","type":"Circle"},{"attributes":{"callback":null,"column_names":["ym","x"],"data":{"x":[0,1],"ym":[0.5,0.5]}},"id":"daa6d43f-6601-42b4-a69b-efe53178a038","type":"ColumnDataSource"},{"attributes":{},"id":"1cf7b785-95ae-4927-bd31-a197cc3a27f9","type":"ToolEvents"},{"attributes":{"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"line_width":{"value":5},"x":{"field":"x"},"y":{"field":"ym"}},"id":"920ed8fb-597f-4680-9221-503de7bd0624","type":"Line"},{"attributes":{"line_alpha":{"value":0.6},"line_color":{"value":"orange"},"line_width":{"value":5},"x":{"field":"x"},"y":{"field":"ym"}},"id":"c1c2c73d-69ee-491d-a1b8-bdd49059f480","type":"Line"},{"attributes":{},"id":"637f4dde-c60d-41e3-9db2-9f88fef27693","type":"BasicTickFormatter"},{"attributes":{"plot":{"id":"7ed5ce3b-2d4f-4e9e-976b-f66abc111c30","subtype":"Figure","type":"Plot"},"ticker":{"id":"95aa7f62-37a9-42d0-9295-a340d823679c","type":"BasicTicker"}},"id":"35518cff-13aa-4ef6-96b3-2238297b6256","type":"Grid"},{"attributes":{"data_source":{"id":"daa6d43f-6601-42b4-a69b-efe53178a038","type":"ColumnDataSource"},"glyph":{"id":"c1c2c73d-69ee-491d-a1b8-bdd49059f480","type":"Line"},"hover_glyph":null,"nonselection_glyph":{"id":"920ed8fb-597f-4680-9221-503de7bd0624","type":"Line"},"selection_glyph":null},"id":"6c7f3949-04aa-4dbf-9af8-f16408ea6e65","type":"GlyphRenderer"},{"attributes":{},"id":"5f0f5559-799a-4c33-9be7-a10348c59438","type":"BasicTicker"},{"attributes":{},"id":"95aa7f62-37a9-42d0-9295-a340d823679c","type":"BasicTicker"},{"attributes":{"data_source":{"id":"56134ee8-958f-4ba7-812f-bd963915df4c","type":"ColumnDataSource"},"glyph":{"id":"11c732f8-e828-435b-be73-c219d42ff9a2","type":"Circle"},"hover_glyph":null,"nonselection_glyph":{"id":"ea4f0107-6182-433d-a4c6-2c6622fd2e1d","type":"Circle"},"selection_glyph":null},"id":"e7a45d4b-0da0-43b6-9827-43e1facf0bb3","type":"GlyphRenderer"},{"attributes":{},"id":"7318190c-5cf9-4949-ae43-2f589821e8e3","type":"BasicTickFormatter"},{"attributes":{"formatter":{"id":"637f4dde-c60d-41e3-9db2-9f88fef27693","type":"BasicTickFormatter"},"plot":{"id":"7ed5ce3b-2d4f-4e9e-976b-f66abc111c30","subtype":"Figure","type":"Plot"},"ticker":{"id":"95aa7f62-37a9-42d0-9295-a340d823679c","type":"BasicTicker"}},"id":"baf43564-8d06-496c-8423-951722409136","type":"LinearAxis"},{"attributes":{"callback":null},"id":"774bd5fe-3c50-4d6a-a011-3d432febb411","type":"DataRange1d"},{"attributes":{"formatter":{"id":"7318190c-5cf9-4949-ae43-2f589821e8e3","type":"BasicTickFormatter"},"plot":{"id":"7ed5ce3b-2d4f-4e9e-976b-f66abc111c30","subtype":"Figure","type":"Plot"},"ticker":{"id":"5f0f5559-799a-4c33-9be7-a10348c59438","type":"BasicTicker"}},"id":"3542fe76-bcf3-4d63-95ec-fd87d25e35f6","type":"LinearAxis"},{"attributes":{"below":[{"id":"baf43564-8d06-496c-8423-951722409136","type":"LinearAxis"}],"left":[{"id":"3542fe76-bcf3-4d63-95ec-fd87d25e35f6","type":"LinearAxis"}],"plot_height":400,"plot_width":400,"renderers":[{"id":"baf43564-8d06-496c-8423-951722409136","type":"LinearAxis"},{"id":"35518cff-13aa-4ef6-96b3-2238297b6256","type":"Grid"},{"id":"3542fe76-bcf3-4d63-95ec-fd87d25e35f6","type":"LinearAxis"},{"id":"893f256c-aa71-40ec-a6a1-eb389c0686c2","type":"Grid"},{"id":"18aa021f-213f-4bcb-97ea-00adf6e43baa","type":"PolyAnnotation"},{"id":"e7a45d4b-0da0-43b6-9827-43e1facf0bb3","type":"GlyphRenderer"},{"id":"6c7f3949-04aa-4dbf-9af8-f16408ea6e65","type":"GlyphRenderer"}],"title":{"id":"16d48101-7a75-47b6-a909-62d8a0857d42","type":"Title"},"tool_events":{"id":"1cf7b785-95ae-4927-bd31-a197cc3a27f9","type":"ToolEvents"},"toolbar":{"id":"c854999b-b17e-477f-8d08-eb6d8a7864a1","type":"Toolbar"},"x_range":{"id":"b938067e-2c28-4e2e-b5f5-5c1d01d86136","type":"DataRange1d"},"y_range":{"id":"774bd5fe-3c50-4d6a-a011-3d432febb411","type":"DataRange1d"}},"id":"7ed5ce3b-2d4f-4e9e-976b-f66abc111c30","subtype":"Figure","type":"Plot"},{"attributes":{"args":{"s2":{"id":"daa6d43f-6601-42b4-a69b-efe53178a038","type":"ColumnDataSource"}},"code":"\n        var inds = cb_obj.get('selected')['1d'].indices;\n        var d = cb_obj.get('data');\n        var ym = 0\n\n        if (inds.length == 0) { return; }\n\n        for (i = 0; i < d['color'].length; i++) {\n            d['color'][i] = \"navy\"\n        }\n        for (i = 0; i < inds.length; i++) {\n            d['color'][inds[i]] = \"firebrick\"\n            ym += d['y'][inds[i]]\n        }\n\n        ym /= inds.length\n        s2.get('data')['ym'] = [ym, ym]\n\n        cb_obj.trigger('change');\n        s2.trigger('change');\n    "},"id":"08bd2492-b3b3-42a7-a566-125d986e6fb8","type":"CustomJS"},{"attributes":{"callback":{"id":"08bd2492-b3b3-42a7-a566-125d986e6fb8","type":"CustomJS"},"column_names":["color","y","x"],"data":{"color":["navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy","navy"],"x":[0.6719940274788712,0.9385292434692225,0.925738611354414,0.20175850845557797,0.22690280506131943,0.2746323584375253,0.5550319248273065,0.9835216566881133,0.5749506024118881,0.40711069128086996,0.03285455071873167,0.3802784415544469,0.4598229763843784,0.2669960959093619,0.5008428131015285,0.5996496552125122,0.6252468319981851,0.08687177751591335,0.25595768316591083,0.9985256070912132,0.4172107246143981,0.497593108549644,0.9960567466346146,0.4052753413087875,0.8894908727722031,0.3684830453941671,0.9906632697146899,0.1374134954895151,0.6473621697147176,0.3627177191642461,0.27216888582619714,0.9278800984357146,0.40802404858964847,0.7432094914788745,0.42636332672314714,0.8419495972817498,0.4404325229006337,0.647068729980927,0.019732783761702843,0.5865135152306483,0.773662905041489,0.04733563979540589,0.590074137446561,0.8791732775522085,0.01829279455492927,0.3749895347976847,0.8641718154036111,0.6638882737198419,0.9398685611307717,0.8479446936586293,0.7029875535285288,0.02618762184080803,0.3158981169857715,0.8643212630471977,0.8093297689047575,0.10186693498503552,0.9872548451947928,0.4045474409469936,0.7963803333735542,0.951496943903998,0.5461600370829893,0.2933447520427871,0.6890733686173375,0.39234301856878695,0.1405813025336441,0.19892124595856842,0.10185736992244787,0.788961247761159,0.3563478049495703,0.3149196807787368,0.9326676727767838,0.9798885491693687,0.7218603949967356,0.2536434914042929,0.8383514170858741,0.8590103656633098,0.6356346630477903,0.5276732635428015,0.3837737242858956,0.5778076010647214,0.4940227809585417,0.5469696047152095,0.007618478709294663,0.2327343436445629,0.26048279624751913,0.6559121818411745,0.1725954648852952,0.3785312017202326,0.22871832483293664,0.2756368011500592,0.9513883868880839,0.24118279330342574,0.251661884167945,0.5178847462225803,0.2992215598567597,0.05848421213198496,0.753336981556383,0.1934994005941969,0.40278717498207417,0.9997346892392391,0.9157167988654429,0.14642469630677257,0.5461024166032237,0.46978078343767804,0.8799705864964875,0.3001935278864687,0.6537722775847779,0.5398241254211862,0.1304287387623938,0.5590200128125985,0.07205196196611774,0.7244677645334577,0.9037649729746733,0.00879549115913969,0.26710389044278027,0.670255677185316,0.9357855793179638,0.2631119543674195,0.8583228771970062,0.08181962078710525,0.459994430659739,0.7045003242777593,0.7968919883901459,0.6696718846909806,0.2187090193150888,0.5920567114140529,0.8721855914032167,0.8452585478163427,0.4663918500776977,0.07288366368580879,0.14780566897966718,0.11020657685623403,0.10448939864642959,0.8570763853827178,0.27718335868254795,0.19196090122566123,0.3495132262748194,0.06436624559710857,0.6759883420058436,0.46854553889443173,0.7858056843941922,0.9721695289961259,0.22759870448883568,0.9583580340956939,0.8354186511983356,0.24991070786101577,0.6748678262642027,0.2444371520924623,0.5297219114224166,0.6836746425298208,0.8421397384134154,0.11846425871755739,0.05200436376582551,0.507527185084719,0.8958680909492681,0.8801844080821968,0.2801069679974513,0.2476143579693768,0.5053249400166533,0.8568524630705283,0.5255099197559537,0.8875820519581071,0.9269976604832463,0.008697781934524862,0.32147110009419355,0.7018420380016503,0.23681197127191322,0.6795684480662975,0.023998345128261045,0.6805472393710764,0.7868766535903041,0.1823275014594754,0.5516749648623505,0.4801933851213458,0.2961928854649297,0.19817871354602667,0.8100140214583089,0.559577844320495,0.21086131817011566,0.1586000836463436,0.9872851072478754,0.2576633505652707,0.9601991381580041,0.688495652214019,0.3044198611788145,0.958772391914,0.47325448654687563,0.02050206453950454,0.1437060240912842,0.2075967155034708,0.7607003413828204,0.6711349491207969,0.22792577050011553,0.12451313130579067,0.7061117957719659,0.39019848268530644,0.9455546093767537,0.5246012121586998,0.6080925713009484,0.14806794633127163,0.26078038817047966,0.006589028590139101,0.38533356624193704,0.32476749932716265,0.23894320418338588,0.6755112845739446,0.34892518321180566,0.2638770208343989,0.8905530540751957,0.7918078633417095,0.1272919543515285,0.7549605000594215,0.2365873322531794,0.26963113798708516,0.21573637700583959,0.43579418766446765,0.44577451249473266,0.10222112652182092,0.3823822094885123,0.7825447276742706,0.12429878132026495,0.1313465454827708,0.9609599056549204,0.509998145969142,0.5293189176918259,0.5703249165300823,0.2406127343784239,0.061006289739318764,0.8666937629970265,0.5696720589906809,0.9584355341975191,0.12011849062105673,0.8205405433785112,0.9841767570432284,0.2847236473754662,0.21063888691854804,0.9074625995093738,0.14886039334228318,0.33712104088731476,0.13839744246905827,0.7924815711751895,0.4941947248604739,0.9505459454866498,0.0924082934041166,0.19503441303568414,0.8270241302092397,0.8468181964736414,0.38597787989530974,0.08171000247695082,0.8338623303054999,0.006378901335062581,0.21752882279744168,0.19840264050399536,0.6270511449506873,0.3390474287400451,0.5031987800312447,0.5360445314494149,0.5095478298178292,0.5686889843031332,0.05616180312679919,0.27766926526117264,0.35870634221196684,0.44447590256641467,0.03186277033794982,0.22828442110721026,0.8486374160773681,0.8835267099565125,0.6311403277892471,0.2134301528009468,0.18628635657591364,0.1559689414577372,0.6500539611688283,0.7419510798555803,0.723015089084469,0.8426031171158466,0.3403925198809099,0.9943971292694598,0.7712318756613614,0.4745387701698157,0.3185242337985268,0.4142579907070695,0.8563729595322066,0.8201546818179932,0.43705090404450153,0.8440524736073158,0.8634449383126265,0.9708902946368154,0.42329167937075773,0.5105606556237421,0.15678224126697315,0.9419597562082189,0.3334641918499054,0.644666730605747,0.9091440199273969,0.34626432660191553,0.7564559804788874,0.8845705556902385,0.6348322612544994,0.11469365103245599,0.8709744807559169,0.7398361659943533,0.47964453743027136,0.5534184779211239,0.26453774962254617,0.06217487738232608,0.6681576040662759,0.4454865947011034,0.9997847230089356,0.5784976011537227,0.9551690941044297,0.7043819908332883,0.410315624109753,0.22094072106709906,0.5426908570696449,0.08352326307373836,0.12788364538872088,0.42222839255540723,0.4633611510561938,0.11850110247542955,0.8060455252517463,0.2925210749685533,0.6144924776228181,0.8715074774261714,0.5572279544115218,0.5947967048519058,0.22858366937300745,0.06532867428218259,0.14089901739327682,0.7515226698843409,0.14913126877295757,0.11962362023033157,0.6586812645023017,0.7759864305870675,0.08920798018957066,0.37636958420320743,0.9318161963237438,0.6907116964869848,0.35997037265502896,0.056314150581297406,0.17489867533348313,0.20219601768681694,0.5976501943270572,0.6066592510718065,0.1969066538763946,0.9733571730292813,0.16728198689576346,0.23911659094593973,0.09611488230362286,0.5887839882500805,0.287722633620637,0.2785867591071035,0.5488547521581717,0.14059155234094722,0.042047406447356384,0.7484297950353873,0.7150434330670716,0.11185520655920544,0.3146575145797349,0.9347416854956979,0.9083179970949458,0.07537543789632029,0.08183971175678417,0.8834477942027389,0.10042176326718533,0.9291628559047597,0.5987871929723094,0.5902785634302913,0.7821438930134724,0.14557169689324623,0.6356166447563761,0.4035670050628021,0.2233680076939485,0.833497001277353,0.8037507937207359,0.8466167090418211,0.9852041788894259,0.47086000090954483,0.6417749443003192,0.11899830656813992,0.2556861707757647,0.5805711839819503,0.5289127035845422,0.8970835825737173,0.7871571776519134,0.6081920691243446,0.10487259174155905,0.8226000117446549,0.33929206264731004,0.9542961077234245,0.7747622845184496,0.3116162019956852,0.12409228593163601,0.39961259120273795,0.003818089282117243,0.9891435972759078,0.20330982180188895,0.5984857959068876,0.3469063158152468,0.6722937778781377,0.5577743514613547,0.9148500763472747,0.45765799720616074,0.9090088145691283,0.0635856398598239,0.030092348934055546,0.7166295359278689,0.7508311601417754,0.24270405632625058,0.5407931709614519,0.9524455332018164,0.40682229873520726,0.5274502417861889,0.12638893784408534,0.855665395661448,0.29235620886125935,0.395978615346386,0.5971135087358801,0.37179951983032755,0.5238161241130486,0.5774609971277589,0.41821429578906955,0.02339752254147376,0.9477114978159642,0.5667056502516469,0.2544245183662771,0.001750517771233806,0.42192708788674593,0.01666173698544715,0.7925852324443333,0.24146999879140219,0.45065525122423,0.46613480643511307,0.2699351525438618,0.05173371805676441,0.7891180734515902,0.6766214634213936,0.9884191089161921,0.5290243824974722,0.5778248833822427,0.2975951732096931,0.2078755952428949,0.19246686338097474,0.8471791643114909,0.02888958184848711,0.14678826108111875,0.2984366809082981,0.41455872068024613,0.4083337413017193,0.44022746077545505,0.4275202523822563,0.5258277821757743,0.1986572044736915,0.7736845833179409,0.34430258249007983,0.5830167232719503,0.464487111401478,0.4289097193633996,0.038486947772739755,0.25386364013082563,0.9901592938495142,0.38740780985703194,0.06548014024340842,0.6612956328330841,0.2795397414586229,0.0031572742274708077,0.3305186914624002,0.8662918657570542,0.37295329553096523,0.2715881058993733,0.22662347647159398,0.4203101764004502,0.34453666349348677,0.896830367234931,0.7667366760846517,0.6964306929552769,0.019979565013991896,0.34720748776380395,0.9962972911820986,0.41037128211969187,0.9220687683510812,0.08521356964410498,0.032508471477199485,0.36520976592028587,0.3079977761922096,0.2852135200383291,0.25054958591448717,0.4062660743388975,0.3736489648844079,0.3622682202308095,0.545017938044932,0.9509708830137377,0.09336651172818244,0.8804900387233193,0.9724047524426762,0.2689534825945268,0.8883215867373766,0.017907938432580428,0.40302154093253006,0.8341395015694147,0.6018134992583718],"y":[0.7568662465173405,0.6287871869648443,0.39937948113845956,0.1481998378719881,0.6167067082032248,0.6619510870462418,0.6142501029303319,0.48218082290415787,0.6570107231856083,0.6317399977338507,0.36843165283462687,0.032991095774480894,0.5213967215389902,0.3805462721799273,0.46896334787436045,0.511043630838747,0.4232101196709387,0.02748378841582111,0.4125731079516116,0.7163446339849164,0.5238257317707302,0.3748882674417897,0.25005588626396724,0.4319732772260706,0.805112827280899,0.8539349649165565,0.5969110821666925,0.09454480663230524,0.8489040896045975,0.5001446529533636,0.787819012696413,0.06196696192487905,0.46837669992614883,0.7921460210588307,0.7504830655599032,0.8170135775148242,0.10481332871312221,0.022341595073434917,0.3490557730377414,0.7983813693014984,0.009599821728381142,0.922038834597081,0.6607913126041373,0.6264068942955466,0.08044282010122572,0.27486452833139496,0.3795775774714044,0.5681837743371655,0.17888952719014384,0.8422773824301268,0.9820287629070624,0.8277460135112387,0.9769940901097823,0.5992222336481304,0.2968412247239792,0.8888239374700252,0.9823803241085408,0.5585588185428904,0.1177210579615856,0.3525108641185345,0.6143756767676188,0.37250291374156497,0.3578890492644058,0.3681530944625886,0.40910703409187743,0.6188386816435505,0.28184254921801744,0.8904578609139515,0.2935017126239372,0.910379634125164,0.49086093136582676,0.712958512195961,0.7828743823868388,0.27741977345729874,0.0959960795056134,0.2160623000372146,0.7519518718605326,0.8775341254308108,0.0992328996988292,0.2591466148235191,0.7228739738861296,0.9383192354388773,0.9688490634023091,0.6512491736332583,0.3496774935570901,0.7987424778727418,0.4306715304597095,0.9057648049151731,0.201730532223655,0.9879412277693431,0.10715628002963717,0.11639866681024125,0.13213502053075044,0.9215683354783849,0.061989586906171845,0.05882104464793769,0.1390523931667994,0.4922907141230729,0.9332803082823748,0.3647143150570934,0.00011782640483726237,0.9506312792775077,0.4840591634265574,0.7895127458166574,0.18843795038100053,0.49508479263047744,0.4036460261315369,0.803713547880869,0.2440248878918243,0.8474209659634111,0.8404166397260812,0.8048765007701999,0.7347489798919058,0.9406739874072333,0.23716666584589552,0.2507638366106204,0.6490254378982476,0.0704934582161284,0.9128207890493287,0.6255627349003813,0.7604488380773443,0.5401559458008147,0.2429595328747869,0.3958943000596514,0.1718002940242107,0.5847853039015933,0.5073742817659482,0.14786768719680077,0.5579403928882294,0.8911739359077454,0.8049180426781306,0.8537083273021789,0.17132830393595744,0.6994699763273544,0.14131746081438312,0.041029367301702924,0.9884311914163036,0.31330902459320886,0.023508903846305995,0.3703651804478385,0.09016469630061408,0.12747311972158282,0.03398897540130674,0.30438031311233926,0.019241407302373004,0.25592607246836563,0.5722867730788499,0.9408468291940207,0.5765565897037417,0.1585431466241064,0.23713757247404588,0.5735459943250713,0.3693790590535021,0.4686098687361022,0.7253135686437211,0.8469559662673699,0.20251217231229734,0.4965666867867886,0.5436699569824158,0.9048700699171502,0.3663695125517942,0.16956812690504552,0.5142166008970578,0.9858997731410126,0.7154197272112489,0.3549447366082922,0.8065950792105642,0.5185440407358439,0.23186682746995657,0.6574425436602812,0.4297061574415948,0.28515470060949755,0.3856761349425365,0.2504904143147013,0.9072674746772278,0.7383491183106181,0.30808220635213146,0.19176517672786553,0.6578314725797834,0.3002393538843363,0.42718042781124055,0.3418440911720463,0.7122779309409636,0.33247426696025184,0.3961587383930256,0.6796012824513327,0.6745218621898822,0.45632149060824156,0.18831856975330552,0.17057537147867652,0.7441070166731524,0.6963449599973265,0.2507700389257109,0.6794549479554918,0.3590958688020476,0.5190056435923263,0.6459805615601166,0.3984778165109527,0.6480745026144499,0.3601896662350741,0.5674088429820859,0.8488679177676312,0.22228148556539473,0.7220264882792512,0.01025348455967412,0.3827902730874775,0.15099388770677813,0.9741502142800019,0.5406677172973469,0.1975969634439081,0.961396881530424,0.2139594951495566,0.8951676046450225,0.700301574242358,0.3150854717727123,0.6989720131600278,0.7024286695592143,0.26983444510000776,0.7608265779343316,0.6855426062309923,0.31854084246306125,0.42851210594360245,0.49763605453692794,0.19880844101580486,0.00956299760927437,0.2779355617728059,0.6178376372479317,0.9132548161738976,0.8692507994256173,0.4964883923454746,0.24958119541390023,0.40390238504071574,0.22347913552409682,0.8520362077954653,0.3106729734928474,0.27682482693783406,0.6134168852561468,0.36943368698981827,0.9264995031509887,0.8170431258734336,0.21738249001924426,0.5814599358803644,0.48781906275905884,0.5048532367957916,0.4432516781516239,0.3528287237812867,0.06932216852355721,0.9291594691973756,0.6313720637344588,0.4266166703891917,0.5453224745159444,0.08240735995025583,0.12899656136498794,0.5319957038425155,0.18358340655107963,0.0029735054562478602,0.9369845623929638,0.07950784471668138,0.37320385031175674,0.053984340468726466,0.8943379031542676,0.9335112241412692,0.5090747856518436,0.3558956552751651,0.6490377697376782,0.9210465471510405,0.4860945600645167,0.34976761911870824,0.650541965444258,0.12502161106294507,0.9110408293609262,0.10121622480647186,0.881511087371675,0.8936615298069066,0.20402523683929275,0.9393468273912281,0.855028601714205,0.33999164424951,0.7993823722228587,0.058471431077911196,0.9429758940792852,0.2880805908670203,0.19057385056420362,0.7986699572294165,0.6902394470095901,0.5580315542826846,0.8504374632666972,0.012542083466826615,0.7954414616326237,0.6434670146743576,0.0528732407633159,0.789438856217581,0.08402039519635152,0.22285701694389148,0.264723741825301,0.8173661821508452,0.41105972503657506,0.26266882859765894,0.8933421116268953,0.17692357215921284,0.061030479093331924,0.49075920585758614,0.33636878728532915,0.7809146492590263,0.5904774146027101,0.48871425693879456,0.11115971004587155,0.6187031684559605,0.8108548520384203,0.18687985067363244,0.23982796300592246,0.5961378932724701,0.3832669114644218,0.21943602431389442,0.5741169007117051,0.025644152124928876,0.2262696438925219,0.6687666913022576,0.8150706859676033,0.8873422540897927,0.7218499177122352,0.50246436212185,0.6388167668348252,0.8802018763578637,0.9747405396616471,0.5623954541472175,0.6835284756651111,0.10066851981992253,0.6010257328410529,0.5509292953823244,0.6032989340431532,0.7830590788862459,0.8698982108407053,0.04580842559067788,0.0051698749025055335,0.17049902093290414,0.1718231834471634,0.9894223019466412,0.9572512574840254,0.25327909284280814,0.47614893616635834,0.004685237605803638,0.4156219254957304,0.7725072096731466,0.7970932093698175,0.1873313306291735,0.21194211624728176,0.7844408975336704,0.5363198791088805,0.7508979803255043,0.809096326015157,0.150550666000005,0.4797223589818629,0.8947848561869851,0.6070671775766043,0.3690249386838954,0.05146883453371609,0.3172499523450991,0.4783713265893941,0.1508669595408776,0.3485790052761505,0.3635753633581621,0.005404528252463403,0.14481170190385595,0.45531693372184245,0.5199050663840694,0.04635287575327929,0.8268215610764857,0.003443893817008603,0.3701098749867998,0.24600692288541604,0.22558519421743295,0.6650338460656293,0.13399249370624355,0.8583939511219318,0.11359991222869525,0.59775443346981,0.2493166068750967,0.7931638069182502,0.7176402073822183,0.02234567034820467,0.6114553252756867,0.42277569146290617,0.3280873436270838,0.615487856532722,0.5589161310577861,0.1595527009928971,0.563093243423645,0.14577176223535826,0.5987971023780627,0.6270469726659832,0.17065143137138128,0.10563132899133454,0.743175242931658,0.44206383596665133,0.21283286868848328,0.20802221496778805,0.7461452963234823,0.6102548812464363,0.9518572895396017,0.9570864577232118,0.6737398390352536,0.2035200915977059,0.08054749313924237,0.2834032437151297,0.34169378560200336,0.8401661985514807,0.26920331706862777,0.9949382133444854,0.7420124969939357,0.7253777025695259,0.7436497134379998,0.667013208415531,0.5855276606105794,0.9031447919263687,0.8103965153968482,0.9192508569428012,0.5273853387926399,0.615572384742984,0.2919801757643038,0.354232177001812,0.5372650512906866,0.0987041520428239,0.6755923182670861,0.7591190703928383,0.4870903272505792,0.45726140784034386,0.19687568008009326,0.5196681324078994,0.8942567536417866,0.7060020283833637,0.10708437821837402,0.9663554916387425,0.15359207792719876,0.02064283115221055,0.2658347177328063,0.6597659420597289,0.8512871936127857,0.00731657013650977,0.02184453253714491,0.6903436792865144,0.15901862068283368,0.016340051458848648,0.6922594417850988,0.6645577363508809,0.1406323498816774,0.7211214403080766,0.7205352726106317,0.7781760983341572,0.27474324718206067,0.160796951899144,0.830821981022891,0.9550432630883401,0.46677065966880693,0.161440271731215,0.25076097247912366,0.14265108012261696,0.498962377309466,0.23799692410201645,0.8939896667699746,0.3071249638786884,0.2664055304364056,0.7140826748742827,0.8538303717121474,0.07421944662945745,0.39193628471707687,0.1592614655223804,0.8702946559309203,0.22265397253969266,0.5249277151869983,0.5008761284731504,0.21025120663718577,0.6895113788996075,0.9243494913185379,0.5881122002394243,0.6006342325115376,0.8160075092629818,0.1860908997665719,0.6309246928656107,0.873018984785778,0.09648123302575251,0.5676840334063129,0.31577168737980443,0.3922957373870377,0.04997951103083331,0.37329434798265093,0.7563757343424606,0.4018599599231103,0.8554344291569095,0.5682550982001539,0.8174398299287808,0.958320986327806,0.5610176428390914,0.10892472648174734,0.9468287170741929,0.8719045652197764,0.5945454152143452,0.03647200494439151,0.017723728799632577,0.9525069475696696]}},"id":"56134ee8-958f-4ba7-812f-bd963915df4c","type":"ColumnDataSource"},{"attributes":{"callback":null,"overlay":{"id":"18aa021f-213f-4bcb-97ea-00adf6e43baa","type":"PolyAnnotation"},"plot":{"id":"7ed5ce3b-2d4f-4e9e-976b-f66abc111c30","subtype":"Figure","type":"Plot"}},"id":"d6546600-71c9-400a-a7cd-8f5c34d4c1aa","type":"LassoSelectTool"},{"attributes":{"callback":null},"id":"b938067e-2c28-4e2e-b5f5-5c1d01d86136","type":"DataRange1d"}],"root_ids":["7ed5ce3b-2d4f-4e9e-976b-f66abc111c30"]},"title":"Bokeh Application","version":"0.12.1.9393"}};
              var render_items = [{"docid":"e6a82a98-a366-4790-96f0-db50af684fcf","elementid":"ef64f879-a0d8-459f-87d7-de70d8a2739c","modelid":"7ed5ce3b-2d4f-4e9e-976b-f66abc111c30"}];
              
              Bokeh.embed.embed_items(docs_json, render_items);
          });
        },
        function(Bokeh) {
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-0.12.1.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-0.12.1.min.css");
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.1.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.1.min.css");
        }
      ];
    
      function run_inline_js() {
        for (var i = 0; i < inline_js.length; i++) {
          inline_js[i](window.Bokeh);
        }
      }
    
      if (window._bokeh_is_loading === 0) {
        console.log("Bokeh: BokehJS loaded, going straight to plotting");
        run_inline_js();
      } else {
        load_libs(js_urls, function() {
          console.log("Bokeh: BokehJS plotting callback run at", now());
          run_inline_js();
        });
      }
    }(this));
});