(function() {
  var fn = function() {
    
    (function(root) {
      function now() {
        return new Date();
      }
    
      var force = false;
    
      if (typeof (root._bokeh_onload_callbacks) === "undefined" || force === true) {
        root._bokeh_onload_callbacks = [];
        root._bokeh_is_loading = undefined;
      }
    
      
      
    
      
      
    
      function run_callbacks() {
        try {
          root._bokeh_onload_callbacks.forEach(function(callback) { callback() });
        }
        finally {
          delete root._bokeh_onload_callbacks
        }
        console.info("Bokeh: all callbacks have finished");
      }
    
      function load_libs(js_urls, callback) {
        root._bokeh_onload_callbacks.push(callback);
        if (root._bokeh_is_loading > 0) {
          console.log("Bokeh: BokehJS is being loaded, scheduling callback at", now());
          return null;
        }
        if (js_urls == null || js_urls.length === 0) {
          run_callbacks();
          return null;
        }
        console.log("Bokeh: BokehJS not loaded, scheduling load and callback at", now());
        root._bokeh_is_loading = js_urls.length;
        for (var i = 0; i < js_urls.length; i++) {
          var url = js_urls[i];
          var s = document.createElement('script');
          s.src = url;
          s.async = false;
          s.onreadystatechange = s.onload = function() {
            root._bokeh_is_loading--;
            if (root._bokeh_is_loading === 0) {
              console.log("Bokeh: all BokehJS libraries loaded");
              run_callbacks()
            }
          };
          s.onerror = function() {
            console.warn("failed to load library " + url);
          };
          console.log("Bokeh: injecting script tag for BokehJS library: ", url);
          document.getElementsByTagName("head")[0].appendChild(s);
        }
      };var element = document.getElementById("cd85c4ee-7296-46cb-b085-a88f5d1de32b");
      if (element == null) {
        console.log("Bokeh: ERROR: autoload.js configured with elementid 'cd85c4ee-7296-46cb-b085-a88f5d1de32b' but no matching script tag was found. ")
        return false;
      }
    
      var js_urls = ["https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js", "https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/js/ion.rangeSlider.js", "https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-0.12.15.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.15.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-0.12.15.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-gl-0.12.15.min.js"];
    
      var inline_js = [
        function(Bokeh) {
          Bokeh.set_log_level("info");
        },
        
        function(Bokeh) {
          (function(root, factory) {
          //  if(typeof exports === 'object' && typeof module === 'object')
          //    factory(require("Bokeh"));
          //  else if(typeof define === 'function' && define.amd)
          //    define(["Bokeh"], factory);
          //  else if(typeof exports === 'object')
          //    factory(require("Bokeh"));
          //  else
              factory(root["Bokeh"]);
          })(this, function(Bokeh) {
            var define;
            return (function outer(modules, entry) {
            if (Bokeh != null) {
              return Bokeh.register_plugin(modules, {}, entry);
            } else {
              throw new Error("Cannot find Bokeh. You have to load it prior to loading plugins.");
            }
          })
          ({
            "custom/main": function(require, module, exports) {
              var models = {
                "Surface3d": require("custom/bk_script_66d434674bd945339d427d3410a62a05.surface3d").Surface3d,
          "IonRangeSlider": require("custom/bk_script_6bbffed6a92843428ebf149ab2d70e33.ion_range_slider").IonRangeSlider,
          "Custom": require("custom/bk_script_8355b62fc4e447beb7e563146c5db4ab.custom").Custom,
          "DrawTool": require("custom/bk_script_8b6a824193b54b1d88fc7b74ac6d180e.draw_tool").DrawTool,
          "LatexLabel": require("custom/bk_script_bd1bb66dde88488cb0e0195aca481dbb.latex_label").LatexLabel,
          "MyFormatter": require("custom/bk_script_f862fae40e2d4b40b6644b159157f372.my_formatter").MyFormatter
              };
              require("base").register_models(models);
              module.exports = models;
            },
            "custom/bk_script_66d434674bd945339d427d3410a62a05.surface3d": function(require, module, exports) {
          "use strict";
          // This file contains the JavaScript (CoffeeScript) implementation
          // for a Bokeh custom extension. The "surface3d.py" contains the
          // python counterpart.
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          // This custom model wraps one part of the third-party vis.js library:
          //     http://visjs.org/index.html
          // Making it easy to hook up python data analytics tools (NumPy, SciPy,
          // Pandas, etc.) to web presentations using the Bokeh server.
          // These "require" lines are similar to python "import" statements
          var OPTIONS;
          var p = require("core/properties");
          var layout_dom_1 = require("models/layouts/layout_dom");
          // This defines some default options for the Graph3d feature of vis.js
          // See: http://visjs.org/graph3d_examples.html for more details.
          OPTIONS = {
              width: '600px',
              height: '600px',
              style: 'surface',
              showPerspective: true,
              showGrid: true,
              keepAspectRatio: true,
              verticalRatio: 1.0,
              legendLabel: 'stuff',
              cameraPosition: {
                  horizontal: -0.35,
                  vertical: 0.22,
                  distance: 1.8
              }
          };
          // To create custom model extensions that will render on to the HTML canvas
          // or into the DOM, we must create a View subclass for the model.
          // In this case we will subclass from the existing BokehJS ``LayoutDOMView``
          exports.Surface3dView = /** @class */ (function (_super) {
              __extends(Surface3dView, _super);
              function Surface3dView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              Surface3dView.prototype.initialize = function (options) {
                  var _this = this;
                  var script, url;
                  _super.prototype.initialize.call(this, options);
                  url = "https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.min.js";
                  script = document.createElement('script');
                  script.src = url;
                  script.async = false;
                  script.onreadystatechange = script.onload = function () {
                      return _this._init();
                  };
                  return document.querySelector("head").appendChild(script);
              };
              Surface3dView.prototype._init = function () {
                  // Create a new Graph3s using the vis.js API. This assumes the vis.js has
                  // already been loaded (e.g. in a custom app template). In the future Bokeh
                  // models will be able to specify and load external scripts automatically.
                  var _this = this;
                  // BokehJS Views create <div> elements by default, accessible as @el. Many
                  // Bokeh views ignore this default <div>, and instead do things like draw
                  // to the HTML canvas. In this case though, we use the <div> to attach a
                  // Graph3d to the DOM.
                  this._graph = new vis.Graph3d(this.el, this.get_data(), OPTIONS);
                  // Set a listener so that when the Bokeh data source has a change
                  // event, we can process the new data
                  return this.connect(this.model.data_source.change, function () {
                      return _this._graph.setData(_this.get_data());
                  });
              };
              // This is the callback executed when the Bokeh data has an change. Its basic
              // function is to adapt the Bokeh data source to the vis.js DataSet format.
              Surface3dView.prototype.get_data = function () {
                  var data, i, j, ref, source;
                  data = new vis.DataSet();
                  source = this.model.data_source;
                  for (i = j = 0, ref = source.get_length(); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                      data.add({
                          x: source.get_column(this.model.x)[i],
                          y: source.get_column(this.model.y)[i],
                          z: source.get_column(this.model.z)[i],
                          style: source.get_column(this.model.color)[i]
                      });
                  }
                  return data;
              };
              return Surface3dView;
          }(layout_dom_1.LayoutDOMView));
          exports.Surface3d = (function () {
              // We must also create a corresponding JavaScript BokehJS model subclass to
              // correspond to the python Bokeh model subclass. In this case, since we want
              // an element that can position itself in the DOM according to a Bokeh layout,
              // we subclass from ``LayoutDOM``
              var Surface3d = /** @class */ (function (_super) {
                  __extends(Surface3d, _super);
                  function Surface3d() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  return Surface3d;
              }(layout_dom_1.LayoutDOM));
              ;
              // This is usually boilerplate. In some cases there may not be a view.
              Surface3d.prototype.default_view = exports.Surface3dView;
              // The ``type`` class attribute should generally match exactly the name
              // of the corresponding Python class.
              Surface3d.prototype.type = "Surface3d";
              // The @define block adds corresponding "properties" to the JS model. These
              // should basically line up 1-1 with the Python model class. Most property
              // types have counterparts, e.g. ``bokeh.core.properties.String`` will be
              // ``p.String`` in the JS implementatin. Where the JS type system is not yet
              // as rich, you can use ``p.Any`` as a "wildcard" property type.
              Surface3d.define({
                  x: [p.String],
                  y: [p.String],
                  z: [p.String],
                  color: [p.String],
                  data_source: [p.Instance]
              });
              return Surface3d;
          })();
    
          },
          "custom/bk_script_6bbffed6a92843428ebf149ab2d70e33.ion_range_slider": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var callback_1 = require("core/util/callback");
          var p = require("core/properties");
          var dom_1 = require("core/dom");
          var input_widget_1 = require("models/widgets/input_widget");
          // This model will actually need to render things, so we must provide
          // view. The LayoutDOM model has a view already, so we will start with that
          exports.IonRangeSliderView = /** @class */ (function (_super) {
              __extends(IonRangeSliderView, _super);
              function IonRangeSliderView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              IonRangeSliderView.prototype._createElement = function () {
                  var el;
                  el = _super.prototype._createElement.call(this);
                  this.$el = $(el);
                  return el;
              };
              IonRangeSliderView.prototype.template = function () {
                  var title, value;
                  if (this.model.title != null) {
                      if (this.model.title.length !== 0) {
                          title = dom_1.label({
                              for: this.model.id
                          }, " " + this.model.title + ": ");
                      }
                      value = dom_1.input({
                          type: "text",
                          id: this.model.id,
                          readonly: true
                      });
                  }
                  return dom_1.div({
                      class: "bk-slider-parent"
                  }, title, value, dom_1.div({
                      class: "bk-slider-horizontal"
                  }, dom_1.input({
                      type: "text",
                      class: "slider",
                      id: this.model.id
                  })));
              };
              IonRangeSliderView.prototype.initialize = function (options) {
                  _super.prototype.initialize.call(this, options);
                  this.connect(this.model.change, this.render);
                  dom_1.empty(this.el);
                  this.el.appendChild(this.template());
                  this.callbackWrapper = null;
                  if (this.model.callback_policy === 'continuous') {
                      this.callbackWrapper = function () {
                          var ref;
                          return (ref = this.model.callback) != null ? ref.execute(this.model) : void 0;
                      };
                  }
                  if (this.model.callback_policy === 'throttle' && this.model.callback) {
                      this.callbackWrapper = callback_1.throttle(function () {
                          var ref;
                          return (ref = this.model.callback) != null ? ref.execute(this.model) : void 0;
                      }, this.model.callback_throttle);
                  }
                  return this.render();
              };
              IonRangeSliderView.prototype.render = function () {
                  var _this = this;
                  var disable, from, grid, max, min, opts, range, slider, step, to;
                  // BokehJS Views create <div> elements by default, accessible as @$el.
                  // Many Bokeh views ignore this default <div>, and instead do things
                  // like draw to the HTML canvas. In this case though, we change the
                  // contents of the <div>, based on the current slider value.
                  _super.prototype.render.call(this);
                  // Set up parameters
                  max = this.model.end;
                  min = this.model.start;
                  grid = this.model.grid;
                  disable = this.model.disabled;
                  range = this.model.range || [max, min];
                  from = range[0], to = range[1];
                  step = this.model.step || ((max - min) / 50);
                  opts = {
                      type: "double",
                      grid: grid,
                      min: min,
                      max: max,
                      from: from,
                      to: to,
                      step: step,
                      disable: disable,
                      onChange: function (data) {
                          return _this.slide(data);
                      },
                      onFinish: function (data) {
                          return _this.slidestop(data);
                      }
                  };
                  dom_1.input = this.$el.find('.slider')[0];
                  slider = jQuery(dom_1.input).ionRangeSlider(opts);
                  range = [from, to];
                  this.$el.find("#" + this.model.id).val(range.join(' - '));
                  this.$el.find('.bk-slider-parent').height(this.model.height);
                  return this;
              };
              IonRangeSliderView.prototype.slidestop = function (data) {
                  var ref;
                  if (this.model.callback_policy === 'mouseup' || this.model.callback_policy === 'throttle') {
                      return (ref = this.model.callback) != null ? ref.execute(this.model) : void 0;
                  }
              };
              IonRangeSliderView.prototype.slide = function (data) {
                  var range, value;
                  range = [data.from, data.to];
                  value = range.join(' - ');
                  this.$el.find("#" + this.model.id).val(value);
                  this.model.range = range;
                  if (this.callbackWrapper) {
                      return this.callbackWrapper();
                  }
              };
              return IonRangeSliderView;
          }(input_widget_1.InputWidgetView));
          exports.IonRangeSlider = (function () {
              var IonRangeSlider = /** @class */ (function (_super) {
                  __extends(IonRangeSlider, _super);
                  function IonRangeSlider() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  return IonRangeSlider;
              }(input_widget_1.InputWidget));
              ;
              // If there is an associated view, this is boilerplate.
              IonRangeSlider.prototype.default_view = exports.IonRangeSliderView;
              // The ``type`` class attribute should generally match exactly the name
              // of the corresponding Python class.
              IonRangeSlider.prototype.type = "IonRangeSlider";
              // The @define block adds corresponding "properties" to the JS model. These
              // should basically line up 1-1 with the Python model class. Most property
              // types have counterparts, e.g. bokeh.core.properties.String will be
              // p.String in the JS implementation. Where the JS type system is not yet
              // as rich, you can use p.Any as a "wildcard" property type.
              IonRangeSlider.define({
                  range: [p.Any],
                  start: [p.Number, 0],
                  end: [p.Number, 1],
                  step: [p.Number, 0.1],
                  grid: [p.Bool, true],
                  callback_throttle: [p.Number, 200],
                  callback_policy: [p.String, "throttle"]
              });
              return IonRangeSlider;
          })();
    
          },
          "custom/bk_script_8355b62fc4e447beb7e563146c5db4ab.custom": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var dom_1 = require("core/dom");
          var p = require("core/properties");
          var layout_dom_1 = require("models/layouts/layout_dom");
          var CustomView = /** @class */ (function (_super) {
              __extends(CustomView, _super);
              function CustomView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              CustomView.prototype.initialize = function (options) {
                  var _this = this;
                  _super.prototype.initialize.call(this, options);
                  this.render();
                  // Set BokehJS listener so that when the Bokeh slider has a change
                  // event, we can process the new data
                  this.connect(this.model.slider.change, function () { return _this.render(); });
              };
              CustomView.prototype.render = function () {
                  // BokehjS Views create <div> elements by default, accessible as
                  // ``this.el``. Many Bokeh views ignore this default <div>, and instead
                  // do things like draw to the HTML canvas. In this case though, we change
                  // the contents of the <div>, based on the current slider value.
                  dom_1.empty(this.el);
                  this.el.appendChild(dom_1.div({
                      style: {
                          'padding': '2px',
                          'color': '#b88d8e',
                          'background-color': '#2a3153',
                      },
                  }, this.model.text + ": " + this.model.slider.value));
              };
              return CustomView;
          }(layout_dom_1.LayoutDOMView));
          exports.CustomView = CustomView;
          var Custom = /** @class */ (function (_super) {
              __extends(Custom, _super);
              function Custom() {
                  var _this = _super !== null && _super.apply(this, arguments) || this;
                  // If there is an associated view, this is typically boilerplate.
                  _this.default_view = CustomView;
                  // The ``type`` class attribute should generally match exactly the name
                  // of the corresponding Python class.
                  _this.type = "Custom";
                  return _this;
              }
              return Custom;
          }(layout_dom_1.LayoutDOM));
          exports.Custom = Custom;
          // The @define block adds corresponding "properties" to the JS model. These
          // should normally line up 1-1 with the Python model class. Most property
          // types have counterparts, e.g. bokeh.core.properties.String will be
          // ``p.String`` in the JS implementation. Any time the JS type system is not
          // yet as complete, you can use ``p.Any`` as a "wildcard" property type.
          Custom.define({
              text: [p.String],
              slider: [p.Any],
          });
    
          },
          "custom/bk_script_8b6a824193b54b1d88fc7b74ac6d180e.draw_tool": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var p = require("core/properties");
          var gesture_tool_1 = require("models/tools/gestures/gesture_tool");
          exports.DrawToolView = /** @class */ (function (_super) {
              __extends(DrawToolView, _super);
              function DrawToolView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              // this is executed when the pan/drag event starts
              DrawToolView.prototype._pan_start = function (e) {
                  return this.model.source.data = {
                      x: [],
                      y: []
                  };
              };
              // this is executed on subsequent mouse/touch moves
              DrawToolView.prototype._pan = function (e) {
                  var frame, sx, sy, x, y;
                  frame = this.plot_model.frame;
                  (sx = e.sx, sy = e.sy);
                  if (!frame.bbox.contains(sx, sy)) {
                      return null;
                  }
                  x = frame.xscales['default'].invert(sx);
                  y = frame.yscales['default'].invert(sy);
                  this.model.source.data.x.push(x);
                  this.model.source.data.y.push(y);
                  return this.model.source.change.emit();
              };
              // this is executed then the pan/drag ends
              DrawToolView.prototype._pan_end = function (e) {
                  return null;
              };
              return DrawToolView;
          }(gesture_tool_1.GestureToolView));
          exports.DrawTool = (function () {
              var DrawTool = /** @class */ (function (_super) {
                  __extends(DrawTool, _super);
                  function DrawTool() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  return DrawTool;
              }(gesture_tool_1.GestureTool));
              ;
              DrawTool.prototype.default_view = exports.DrawToolView;
              DrawTool.prototype.type = "DrawTool";
              DrawTool.prototype.tool_name = "Drag Span";
              DrawTool.prototype.icon = "bk-tool-icon-lasso-select";
              DrawTool.prototype.event_type = "pan";
              DrawTool.prototype.default_order = 12;
              DrawTool.define({
                  source: [p.Instance]
              });
              return DrawTool;
          })();
    
          },
          "custom/bk_script_bd1bb66dde88488cb0e0195aca481dbb.latex_label": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var label_1 = require("models/annotations/label");
          exports.LatexLabelView = /** @class */ (function (_super) {
              __extends(LatexLabelView, _super);
              function LatexLabelView() {
                  return _super !== null && _super.apply(this, arguments) || this;
              }
              LatexLabelView.prototype.render = function () {
                  var angle, panel, ref, sx, sy, xscale, yscale;
                  //--- Start of copied section from ``Label.render`` implementation
                  // Here because AngleSpec does units tranform and label doesn't support specs
                  switch (this.model.angle_units) {
                      case "rad":
                          angle = -1 * this.model.angle;
                          break;
                      case "deg":
                          angle = -1 * this.model.angle * Math.PI / 180.0;
                  }
                  panel = (ref = this.model.panel) != null ? ref : this.plot_view.frame;
                  xscale = this.plot_view.frame.xscales[this.model.x_range_name];
                  yscale = this.plot_view.frame.yscales[this.model.y_range_name];
                  sx = this.model.x_units === "data" ? xscale.compute(this.model.x) : panel.xview.compute(this.model.x);
                  sy = this.model.y_units === "data" ? yscale.compute(this.model.y) : panel.yview.compute(this.model.y);
                  sx += this.model.x_offset;
                  sy -= this.model.y_offset;
                  //--- End of copied section from ``Label.render`` implementation
                  // Must render as superpositioned div (not on canvas) so that KaTex
                  // css can properly style the text
                  this._css_text(this.plot_view.canvas_view.ctx, "", sx, sy, angle);
                  // ``katex`` is loaded into the global window at runtime
                  // katex.renderToString returns a html ``span`` element
                  return katex.render(this.model.text, this.el, {
                      displayMode: true
                  });
              };
              return LatexLabelView;
          }(label_1.LabelView));
          exports.LatexLabel = (function () {
              var LatexLabel = /** @class */ (function (_super) {
                  __extends(LatexLabel, _super);
                  function LatexLabel() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  return LatexLabel;
              }(label_1.Label));
              ;
              LatexLabel.prototype.type = 'LatexLabel';
              LatexLabel.prototype.default_view = exports.LatexLabelView;
              return LatexLabel;
          })();
    
          },
          "custom/bk_script_f862fae40e2d4b40b6644b159157f372.my_formatter": function(require, module, exports) {
          "use strict";
          var __extends = (this && this.__extends) || (function () {
              var extendStatics = Object.setPrototypeOf ||
                  ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                  function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
              return function (d, b) {
                  extendStatics(d, b);
                  function __() { this.constructor = d; }
                  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
          })();
          Object.defineProperty(exports, "__esModule", { value: true });
          var tick_formatter_1 = require("models/formatters/tick_formatter");
          exports.MyFormatter = (function () {
              var MyFormatter = /** @class */ (function (_super) {
                  __extends(MyFormatter, _super);
                  function MyFormatter() {
                      return _super !== null && _super.apply(this, arguments) || this;
                  }
                  // TickFormatters should implement this method, which accepts a lisst
                  // of numbers (ticks) and returns a list of strings
                  MyFormatter.prototype.doFormat = function (ticks) {
                      var formatted, i, j, ref;
                      // format the first tick as-is
                      formatted = ["" + ticks[0]];
                      // format the remaining ticks as a difference from the first
                      for (i = j = 1, ref = ticks.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
                          formatted.push("+" + (ticks[i] - ticks[0]).toPrecision(2));
                      }
                      return formatted;
                  };
                  return MyFormatter;
              }(tick_formatter_1.TickFormatter));
              ;
              MyFormatter.prototype.type = "MyFormatter";
              return MyFormatter;
          })();
    
          }
          }, "custom/main");
          ;
          });
    
        },
        
        function(Bokeh) {
          (function() {
            var fn = function() {
              Bokeh.safely(function() {
                (function(root) {
                  function embed_document(root) {
                    
                  var docs_json = '{"1275e039-52db-4d56-a9f7-ee73c9b990c5":{"roots":{"references":[{"attributes":{},"id":"70349339-6de2-4360-91aa-19ff8792e0e3","type":"PanTool"},{"attributes":{},"id":"3e9a0f5a-5f12-466c-b47b-d657ff8753a2","type":"ResetTool"},{"attributes":{"callback":null},"id":"de248ec3-41b8-44d9-b984-d7c62e937082","type":"DataRange1d"},{"attributes":{},"id":"222adca2-b68c-4087-8bb4-b94723e9ff70","type":"SaveTool"},{"attributes":{},"id":"3ae423af-4bda-450a-908a-e39ab8c88f25","type":"BasicTicker"},{"attributes":{"source":{"id":"2c56e5da-4839-4aea-9dcc-327410945c93","type":"ColumnDataSource"}},"id":"fb4adc5a-f5b3-4f40-89a4-6b1cd91e61b0","type":"CDSView"},{"attributes":{"axis_label":"Y","formatter":{"id":"08676166-7b8b-4259-9695-6b9b48498c7b","type":"BasicTickFormatter"},"plot":{"id":"18808d43-c71c-4fcc-91f6-6ed78da7990a","subtype":"Figure","type":"Plot"},"ticker":{"id":"3ae423af-4bda-450a-908a-e39ab8c88f25","type":"BasicTicker"}},"id":"9ee63c5f-b67d-4fa5-b9d1-2f8447bfca17","type":"LinearAxis"},{"attributes":{"data_source":{"id":"2c56e5da-4839-4aea-9dcc-327410945c93","type":"ColumnDataSource"},"glyph":{"id":"4860d205-64ac-4e6c-b7e9-6fe3b9de8372","type":"Circle"},"hover_glyph":null,"muted_glyph":null,"nonselection_glyph":{"id":"14dcb30f-a878-4af6-90b3-3d44e7cd94ef","type":"Circle"},"selection_glyph":null,"view":{"id":"fb4adc5a-f5b3-4f40-89a4-6b1cd91e61b0","type":"CDSView"}},"id":"99753c63-56b0-48e6-9072-e91d5ab372c8","type":"GlyphRenderer"},{"attributes":{"axis_label":"X","formatter":{"id":"2d6c176c-3e4b-4f42-a3b6-126951b9aa83","type":"BasicTickFormatter"},"plot":{"id":"18808d43-c71c-4fcc-91f6-6ed78da7990a","subtype":"Figure","type":"Plot"},"ticker":{"id":"614c8709-fc9e-40e4-8c8a-230c31f7e373","type":"BasicTicker"}},"id":"5e8e3cb0-b009-45da-bf4b-9fa6606556aa","type":"LinearAxis"},{"attributes":{"grid_line_color":{"value":null},"plot":{"id":"18808d43-c71c-4fcc-91f6-6ed78da7990a","subtype":"Figure","type":"Plot"},"ticker":{"id":"614c8709-fc9e-40e4-8c8a-230c31f7e373","type":"BasicTicker"}},"id":"78c12caa-56f6-4c2f-b8b6-0188cdc8586a","type":"Grid"},{"attributes":{"active_drag":"auto","active_inspect":"auto","active_scroll":"auto","active_tap":"auto","tools":[{"id":"70349339-6de2-4360-91aa-19ff8792e0e3","type":"PanTool"},{"id":"58e4dfb5-b0db-42c1-af42-bc2342981dad","type":"WheelZoomTool"},{"id":"964247c9-8602-4a13-8c08-00de07b04698","type":"BoxZoomTool"},{"id":"3e9a0f5a-5f12-466c-b47b-d657ff8753a2","type":"ResetTool"},{"id":"222adca2-b68c-4087-8bb4-b94723e9ff70","type":"SaveTool"}]},"id":"7129e0e9-9a54-45a3-9e18-b9a7e8e9315d","type":"Toolbar"},{"attributes":{"below":[{"id":"5e8e3cb0-b009-45da-bf4b-9fa6606556aa","type":"LinearAxis"}],"left":[{"id":"9ee63c5f-b67d-4fa5-b9d1-2f8447bfca17","type":"LinearAxis"}],"renderers":[{"id":"5e8e3cb0-b009-45da-bf4b-9fa6606556aa","type":"LinearAxis"},{"id":"78c12caa-56f6-4c2f-b8b6-0188cdc8586a","type":"Grid"},{"id":"9ee63c5f-b67d-4fa5-b9d1-2f8447bfca17","type":"LinearAxis"},{"id":"31578728-b025-4ee1-9a93-72e80570d574","type":"Grid"},{"id":"9be5c7e5-b7dc-4ce9-904e-a75d50ab4e1d","type":"BoxAnnotation"},{"id":"99753c63-56b0-48e6-9072-e91d5ab372c8","type":"GlyphRenderer"},{"id":"850b43d9-c63b-45d4-892b-996a8d4d128e","type":"Band"}],"title":{"id":"ca6989ca-b771-4a9c-92ec-88f078dfb253","type":"Title"},"toolbar":{"id":"7129e0e9-9a54-45a3-9e18-b9a7e8e9315d","type":"Toolbar"},"x_range":{"id":"07fb6778-048d-4524-b9af-f40fb6e2c652","type":"DataRange1d"},"x_scale":{"id":"94d6c6f5-3fa3-4ecd-801e-40fa60624cfb","type":"LinearScale"},"y_range":{"id":"de248ec3-41b8-44d9-b984-d7c62e937082","type":"DataRange1d"},"y_scale":{"id":"8ba4f1d5-36b9-4a6e-9ee6-882e8eb7612c","type":"LinearScale"}},"id":"18808d43-c71c-4fcc-91f6-6ed78da7990a","subtype":"Figure","type":"Plot"},{"attributes":{},"id":"2d6c176c-3e4b-4f42-a3b6-126951b9aa83","type":"BasicTickFormatter"},{"attributes":{},"id":"614c8709-fc9e-40e4-8c8a-230c31f7e373","type":"BasicTicker"},{"attributes":{"callback":null},"id":"07fb6778-048d-4524-b9af-f40fb6e2c652","type":"DataRange1d"},{"attributes":{},"id":"08676166-7b8b-4259-9695-6b9b48498c7b","type":"BasicTickFormatter"},{"attributes":{"dimension":1,"grid_line_alpha":{"value":0.5},"plot":{"id":"18808d43-c71c-4fcc-91f6-6ed78da7990a","subtype":"Figure","type":"Plot"},"ticker":{"id":"3ae423af-4bda-450a-908a-e39ab8c88f25","type":"BasicTicker"}},"id":"31578728-b025-4ee1-9a93-72e80570d574","type":"Grid"},{"attributes":{},"id":"8ba4f1d5-36b9-4a6e-9ee6-882e8eb7612c","type":"LinearScale"},{"attributes":{"fill_alpha":{"value":0.3},"fill_color":{"value":"#1f77b4"},"line_color":{"value":null},"size":{"units":"screen","value":5},"x":{"field":"x"},"y":{"field":"y"}},"id":"4860d205-64ac-4e6c-b7e9-6fe3b9de8372","type":"Circle"},{"attributes":{"fill_alpha":{"value":0.1},"fill_color":{"value":"#1f77b4"},"line_alpha":{"value":0.1},"line_color":{"value":"#1f77b4"},"size":{"units":"screen","value":5},"x":{"field":"x"},"y":{"field":"y"}},"id":"14dcb30f-a878-4af6-90b3-3d44e7cd94ef","type":"Circle"},{"attributes":{"base":{"field":"x","units":"data"},"fill_alpha":{"value":1.0},"level":"underlay","line_color":{"value":"black"},"lower":{"field":"lower","units":"data"},"plot":{"id":"18808d43-c71c-4fcc-91f6-6ed78da7990a","subtype":"Figure","type":"Plot"},"source":{"id":"2c56e5da-4839-4aea-9dcc-327410945c93","type":"ColumnDataSource"},"upper":{"field":"upper","units":"data"}},"id":"850b43d9-c63b-45d4-892b-996a8d4d128e","type":"Band"},{"attributes":{},"id":"94d6c6f5-3fa3-4ecd-801e-40fa60624cfb","type":"LinearScale"},{"attributes":{"bottom_units":"screen","fill_alpha":{"value":0.5},"fill_color":{"value":"lightgrey"},"left_units":"screen","level":"overlay","line_alpha":{"value":1.0},"line_color":{"value":"black"},"line_dash":[4,4],"line_width":{"value":2},"plot":null,"render_mode":"css","right_units":"screen","top_units":"screen"},"id":"9be5c7e5-b7dc-4ce9-904e-a75d50ab4e1d","type":"BoxAnnotation"},{"attributes":{"plot":null,"text":"Rolling Standard Deviation"},"id":"ca6989ca-b771-4a9c-92ec-88f078dfb253","type":"Title"},{"attributes":{},"id":"58e4dfb5-b0db-42c1-af42-bc2342981dad","type":"WheelZoomTool"},{"attributes":{"callback":null,"column_names":["index","x","y","y_mean","y_std","y_sem","lower","upper"],"data":{"index":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2451,2452,2453,2454,2455,2456,2457,2458,2459,2460,2461,2462,2463,2464,2465,2466,2467,2468,2469,2470,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2482,2483,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499],"lower":{"__ndarray__":"LRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0AtGOUnKIIHQC0Y5ScoggdALRjlJyiCB0CIP05yy4EHQLvD3Sy/EAhANHn33yv5B0DqcRnJbgUIQDJ17e6o2gdAXAd+yvkVCED3DynMJaMIQBInjm4poghAamGl71SpCEDGOg2jIM0IQBS2b+SW4ghAoPLe++xSCUD0V5eE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","dtype":"float64","shape":[2500]},"upper":{"__ndarray__":"","dtype":"float64","shape":[2500]},"x":{"__ndarray__":"","dtype":"float64","shape":[2500]},"y":{"__ndarray__":"","dtype":"float64","shape":[2500]},"y_mean":{"__ndarray__":"","dtype":"float64","shape":[2500]},"y_sem":{"__ndarray__":"","dtype":"float64","shape":[2500]},"y_std":{"__ndarray__":"","dtype":"float64","shape":[2500]}},"selected":null,"selection_policy":null},"id":"2c56e5da-4839-4aea-9dcc-327410945c93","type":"ColumnDataSource"},{"attributes":{"overlay":{"id":"9be5c7e5-b7dc-4ce9-904e-a75d50ab4e1d","type":"BoxAnnotation"}},"id":"964247c9-8602-4a13-8c08-00de07b04698","type":"BoxZoomTool"}],"root_ids":["18808d43-c71c-4fcc-91f6-6ed78da7990a"]},"title":"Bokeh Application","version":"0.12.15"}}';
                  var render_items = [{"docid":"1275e039-52db-4d56-a9f7-ee73c9b990c5","elementid":"cd85c4ee-7296-46cb-b085-a88f5d1de32b","modelid":"18808d43-c71c-4fcc-91f6-6ed78da7990a"}];
                  root.Bokeh.embed.embed_items(docs_json, render_items);
                
                  }
                  if (root.Bokeh !== undefined) {
                    embed_document(root);
                  } else {
                    var attempts = 0;
                    var timer = setInterval(function(root) {
                      if (root.Bokeh !== undefined) {
                        embed_document(root);
                        clearInterval(timer);
                      }
                      attempts++;
                      if (attempts > 100) {
                        console.log("Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing")
                        clearInterval(timer);
                      }
                    }, 10, root)
                  }
                })(window);
              });
            };
            if (document.readyState != "loading") fn();
            else document.addEventListener("DOMContentLoaded", fn);
          })();
        },
        function(Bokeh) {
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.css");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/css/ion.rangeSlider.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/css/ion.rangeSlider.css");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/css/ion.rangeSlider.skinFlat.min.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/css/ion.rangeSlider.skinFlat.min.css");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/img/sprite-skin-flat.png");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/ion-rangeslider/2.1.4/img/sprite-skin-flat.png");
          console.log("Bokeh: injecting CSS: https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css");
          Bokeh.embed.inject_css("https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.6.0/katex.min.css");
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-0.12.15.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-0.12.15.min.css");
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.15.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-widgets-0.12.15.min.css");
          console.log("Bokeh: injecting CSS: https://cdn.bokeh.org/bokeh/release/bokeh-tables-0.12.15.min.css");
          Bokeh.embed.inject_css("https://cdn.bokeh.org/bokeh/release/bokeh-tables-0.12.15.min.css");
        }
      ];
    
      function run_inline_js() {
        
        for (var i = 0; i < inline_js.length; i++) {
          inline_js[i].call(root, root.Bokeh);
        }
        
      }
    
      if (root._bokeh_is_loading === 0) {
        console.log("Bokeh: BokehJS loaded, going straight to plotting");
        run_inline_js();
      } else {
        load_libs(js_urls, function() {
          console.log("Bokeh: BokehJS plotting callback run at", now());
          run_inline_js();
        });
      }
    }(window));
  };
  if (document.readyState != "loading") fn();
  else document.addEventListener("DOMContentLoaded", fn);
})();